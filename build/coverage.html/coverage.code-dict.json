{"/home/travis/build/npmtest/node-npmtest-cmake-js/test.js":"/* istanbul instrument in package npmtest_cmake_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cmake-js/lib.npmtest_cmake_js.js":"/* istanbul instrument in package npmtest_cmake_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cmake_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cmake_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cmake-js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cmake-js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cmake_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cmake_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cmake_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cmake_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cmake_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cmake_js.__dirname + '/lib.npmtest_cmake_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/index.js":"var es6 = true;\r\ntry {\r\n    eval(\"(function *(){})\");\r\n    eval(\"var o = {['com'+'puted']: 'property'};\");\r\n} catch (err) {\r\n    es6 = false;\r\n}\r\n\r\nvar es = es6 ? \"es6\" : \"es5\";\r\n\r\nif (!es6) {\r\n    require(\"traceur/bin/traceur-runtime\");\r\n}\r\n\r\nmodule.exports = require(\"./lib/\" + es);","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/index.js":"\"use strict\";\r\n\r\nmodule.exports = {\r\n    BuildSystem: require(\"./buildSystem\"),\r\n    CMLog: require(\"./cmLog\"),\r\n    environment: require(\"./environment\"),\r\n    TargetOptions: require(\"./targetOptions\"),\r\n    Dist: require(\"./dist\"),\r\n    CMake: require(\"./cMake\"),\r\n    downloader: require(\"./downloader\"),\r\n    Toolset: require(\"./toolset\"),\r\n    processHelpers: require(\"./processHelpers\"),\r\n    locateNAN: require(\"./locateNAN\")\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/buildSystem.js":"\"use strict\";\r\nlet CMake = require(\"./cMake\");\r\nlet Dist = require(\"./dist\");\r\nlet CMLog = require(\"./cmLog\");\r\nlet appCMakeJSConfig = require(\"./appCMakeJSConfig\");\r\nlet path = require(\"path\");\r\nlet _ = require(\"lodash\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = Bluebird.coroutine;\r\nlet Toolset = require(\"./toolset\");\r\n\r\nfunction BuildSystem(options) {\r\n    this.options = options || {};\r\n    this.options.directory = path.resolve(this.options.directory || process.cwd());\r\n    this.log = new CMLog(this.options);\r\n    let appConfig = appCMakeJSConfig(this.options.directory, this.log);\r\n    if (_.isPlainObject(appConfig)) {\r\n        if (_.keys(appConfig).length) {\r\n            this.log.verbose(\"CFG\", \"Applying CMake.js config from root package.json:\");\r\n            this.log.verbose(\"CFG\", JSON.stringify(appConfig));\r\n            // Applying applications's config, if there is no explicit runtime related options specified\r\n            this.options.runtime = this.options.runtime || appConfig.runtime;\r\n            this.options.runtimeVersion = this.options.runtimeVersion || appConfig.runtimeVersion;\r\n            this.options.arch = this.options.arch || appConfig.arch;\r\n        }\r\n    }\r\n    this.log.verbose(\"CFG\", \"Build system options:\");\r\n    this.log.verbose(\"CFG\", JSON.stringify(this.options));\r\n    this.cmake = new CMake(this.options);\r\n    this.dist = new Dist(this.options);\r\n    this.toolset = new Toolset(this.options);\r\n}\r\n\r\nBuildSystem.prototype._ensureInstalled = async(function* () {\r\n    try {\r\n        yield this.toolset.initialize(true);\r\n        yield this.dist.ensureDownloaded();\r\n    }\r\n    catch (e) {\r\n        this._showError(e);\r\n        throw e;\r\n    }\r\n});\r\n\r\nBuildSystem.prototype._showError = function (e) {\r\n    if (this.log.level === \"verbose\" || this.log.level === \"silly\") {\r\n        this.log.error(\"OMG\", e.stack);\r\n    }\r\n    else {\r\n        this.log.error(\"OMG\", e.message);\r\n    }\r\n};\r\n\r\nBuildSystem.prototype.install = function () {\r\n    return this._ensureInstalled();\r\n};\r\n\r\nBuildSystem.prototype._invokeCMake = async(function* (method) {\r\n    try {\r\n        yield this._ensureInstalled();\r\n        return yield this.cmake[method]();\r\n    }\r\n    catch (e) {\r\n        this._showError(e);\r\n        throw e;\r\n    }\r\n});\r\n\r\nBuildSystem.prototype.getConfigureCommand = function () {\r\n    return this._invokeCMake(\"getConfigureCommand\");\r\n};\r\n\r\nBuildSystem.prototype.configure = function () {\r\n    return this._invokeCMake(\"configure\");\r\n};\r\n\r\nBuildSystem.prototype.getBuildCommand = function () {\r\n    return this._invokeCMake(\"getBuildCommand\");\r\n};\r\n\r\nBuildSystem.prototype.build = function () {\r\n    return this._invokeCMake(\"build\");\r\n};\r\n\r\nBuildSystem.prototype.getCleanCommand = function () {\r\n    return this._invokeCMake(\"getCleanCommand\");\r\n};\r\n\r\nBuildSystem.prototype.clean = function () {\r\n    return this._invokeCMake(\"clean\");\r\n};\r\n\r\nBuildSystem.prototype.reconfigure = function () {\r\n    return this._invokeCMake(\"reconfigure\");\r\n};\r\n\r\nBuildSystem.prototype.rebuild = function () {\r\n    return this._invokeCMake(\"rebuild\");\r\n};\r\n\r\nBuildSystem.prototype.compile = function () {\r\n    return this._invokeCMake(\"compile\");\r\n};\r\n\r\nmodule.exports = BuildSystem;\r\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/cMake.js":"\"use strict\";\nlet splitargs = require(\"splitargs\");\nlet which = require(\"which\");\nlet Bluebird = require(\"bluebird\");\nlet fs = Bluebird.promisifyAll(require(\"fs-extra\"));\nlet path = require(\"path\");\nlet _ = require(\"lodash\");\nlet environment = require(\"./environment\");\nlet Dist = require(\"./dist\");\nlet CMLog = require(\"./cmLog\");\nlet vsDetect = require(\"./vsDetect\");\nlet TargetOptions = require(\"./targetOptions\");\nlet processHelpers = require(\"./processHelpers\");\nlet locateNAN = require(\"./locateNAN\");\nlet npmconf = Bluebird.promisifyAll(require(\"npmconf\"));\nlet async = Bluebird.coroutine;\nlet Toolset = require(\"./toolset\");\n\nfunction CMake(options) {\n    this.options = options || {};\n    this.log = new CMLog(this.options);\n    this.dist = new Dist(this.options);\n    this.projectRoot = path.resolve(this.options.directory || process.cwd());\n    this.workDir = this.options.out || path.join(this.projectRoot, \"build\");\n    this.config = this.options.debug ? \"Debug\" : \"Release\";\n    this.buildDir = path.join(this.workDir, this.config);\n    this._isAvailable = null;\n    this.targetOptions = new TargetOptions(this.options);\n    this.toolset = new Toolset(this.options);\n    this.cMakeOptions = this.options.cMakeOptions || {};\n    this.silent = !!options.silent;\n}\n\nObject.defineProperties(CMake.prototype, {\n    path: {\n        get: function () {\n            return this.options.cmakePath || \"cmake\";\n        }\n    },\n    isAvailable: {\n        get: function () {\n            if (this._isAvailable === null) {\n                this._isAvailable = CMake.isAvailable(this.options);\n            }\n            return this._isAvailable;\n        }\n    }\n});\n\nCMake.isAvailable = function (options) {\n    options = options || {};\n    try {\n        if (options.cmakePath) {\n            let stat = fs.lstatSync(options.cmakePath);\n            return !stat.isDirectory();\n        }\n        else {\n            which.sync(\"cmake\");\n            return true;\n        }\n    }\n    catch (e) {\n        _.noop(e);\n    }\n    return false;\n};\n\nCMake.getGenerators = async(function* (options) {\n    let arch = \" [arch]\";\n    options = options || {};\n    let gens = [];\n    if (CMake.isAvailable(options)) {\n        let stdout = yield processHelpers.exec((options.cmakePath || \"cmake\") + \" --help\");\n        let hasCr = stdout.includes(\"\\r\\n\");\n        let output = hasCr ? stdout.split(\"\\r\\n\") : stdout.split(\"\\n\");\n        let on = false;\n        output.forEach(function (line, i) {\n            if (on) {\n                let parts = line.split(\"=\");\n                if ((parts.length === 2 && parts[0].trim()) ||\n                    (parts.length === 1 && i !== output.length - 1 && output[i + 1].trim()[0] === \"=\")) {\n                    let gen = parts[0].trim();\n                    if (_.endsWith(gen, arch)) {\n                        gen = gen.substr(0, gen.length - arch.length);\n                    }\n                    gens.push(gen);\n                }\n            }\n            if (line.trim() === \"Generators\") {\n                on = true;\n            }\n        });\n    }\n    return gens;\n});\n\nCMake.prototype.getGenerators = function () {\n    return CMake.getGenerators(this.options);\n};\n\nCMake.prototype.verifyIfAvailable = function () {\n    if (!this.isAvailable) {\n        throw new Error(\"CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.\");\n    }\n};\n\nCMake.prototype.getConfigureCommand = async(function* () {\n    // Create command:\n    let command = this.path;\n    command += \" \\\"\" + this.projectRoot + \"\\\" --no-warn-unused-cli\";\n\n    let D = [];\n\n    // CMake.js watermark\n    D.push({\"CMAKE_JS_VERSION\": environment.moduleVersion});\n\n    // Build configuration:\n    D.push({\"CMAKE_BUILD_TYPE\": this.config});\n    if (environment.isWin) {\n\t\tD.push({\"CMAKE_RUNTIME_OUTPUT_DIRECTORY\": this.workDir});\n\t}\n\telse {\n\t\tD.push({\"CMAKE_LIBRARY_OUTPUT_DIRECTORY\": this.buildDir});\n\t}\n\n    // Include and lib:\n    let incPaths;\n    if (this.dist.headerOnly) {\n        incPaths = [path.join(this.dist.internalPath, \"/include/node\")];\n    }\n    else {\n        let nodeH = path.join(this.dist.internalPath, \"/src\");\n        let v8H = path.join(this.dist.internalPath, \"/deps/v8/include\");\n        let uvH = path.join(this.dist.internalPath, \"/deps/uv/include\");\n        incPaths = [nodeH, v8H, uvH];\n    }\n\n    // NAN\n    let nanH = yield locateNAN(this.projectRoot);\n    if (nanH) {\n        incPaths.push(nanH);\n    }\n\n    // Includes:\n    D.push({\"CMAKE_JS_INC\": incPaths.join(\";\")});\n\n    // Runtime:\n    D.push({\"NODE_RUNTIME\": this.targetOptions.runtime});\n    D.push({\"NODE_RUNTIMEVERSION\": this.targetOptions.runtimeVersion});\n    D.push({\"NODE_ARCH\": this.targetOptions.arch});\n\n    if (environment.isWin) {\n        // Win\n        let libs = this.dist.winLibs;\n        if (libs.length) {\n            D.push({\"CMAKE_JS_LIB\": libs.join(\";\")});\n        }\n    }\n\n    // Custom options\n    for (let k of _.keys(this.cMakeOptions)) {\n        D.push({[k.toUpperCase()]: this.cMakeOptions[k]});\n    }\n\n    // Toolset:\n    yield this.toolset.initialize(false);\n\n    if (this.toolset.generator) {\n        command += \" -G\\\"\" + this.toolset.generator + \"\\\"\";\n    }\n    if (this.toolset.cppCompilerPath) {\n        D.push({\"CMAKE_CXX_COMPILER\": this.toolset.cppCompilerPath});\n    }\n    if (this.toolset.cCompilerPath) {\n        D.push({\"CMAKE_C_COMPILER\": this.toolset.cCompilerPath});\n    }\n    if (this.toolset.compilerFlags.length) {\n        D.push({\"CMAKE_CXX_FLAGS\": this.toolset.compilerFlags.join(\" \")});\n    }\n    if (this.toolset.linkerFlags.length) {\n        D.push({\"CMAKE_SHARED_LINKER_FLAGS\": this.toolset.linkerFlags.join(\" \")});\n    }\n    if (this.toolset.makePath) {\n        D.push({\"CMAKE_MAKE_PROGRAM\": this.toolset.makePath});\n    }\n\n    // Load NPM config\n    let npmConfig = yield npmconf.loadAsync();\n    let npmConfigData = {};\n    if (npmConfig.sources.global && npmConfig.sources.global.data) {\n        _.extend(npmConfigData, npmConfig.sources.global.data);\n    }\n    if (npmConfig.sources.user && npmConfig.sources.user.data) {\n        _.extend(npmConfigData, npmConfig.sources.user.data);\n    }\n    for (let key of _.keys(npmConfigData)) {\n        let ukey = key.toUpperCase();\n        if (_.startsWith(ukey, \"CMAKE_\")) {\n            let s = {};\n            let sk = ukey.substr(6);\n            if (sk) {\n                s[sk] = npmConfigData[key];\n                if (s[sk]) {\n                    D.push(s);\n                }\n            }\n        }\n    }\n\n    command += \" \" +\n        D.map(function (p) {\n            return \"-D\" + _.keys(p)[0] + \"=\\\"\" + _.values(p)[0] + \"\\\"\";\n        }).join(\" \");\n\n    return command;\n});\n\nCMake.prototype.configure = async(function* () {\n    this.verifyIfAvailable();\n\n    this.log.info(\"CMD\", \"CONFIGURE\");\n    let listPath = path.join(this.projectRoot, \"CMakeLists.txt\");\n    let command = yield this.getConfigureCommand();\n\n    try {\n        yield fs.lstatAsync(listPath);\n    }\n    catch (e) {\n        throw new Error(\"'\" + listPath + \"' not found.\");\n    }\n\n    try {\n        yield fs.mkdirAsync(this.workDir);\n    }\n    catch (e) {\n        _.noop(e);\n    }\n\n    let cwd = process.cwd();\n    process.chdir(this.workDir);\n    try {\n        yield this._run(command);\n    }\n    finally {\n        process.chdir(cwd);\n    }\n});\n\nCMake.prototype.ensureConfigured = async(function* () {\n    try {\n        yield fs.lstatAsync(path.join(this.workDir, \"CMakeCache.txt\"));\n    }\n    catch (e) {\n        _.noop(e);\n        yield this.configure();\n    }\n});\n\nCMake.prototype.getBuildCommand = function () {\n    return Bluebird.resolve(this.path + \" --build \\\"\" + this.workDir + \"\\\" --config \" + this.config);\n};\n\nCMake.prototype.build = async(function* () {\n    this.verifyIfAvailable();\n\n    yield this.ensureConfigured();\n    let buildCommand = yield this.getBuildCommand();\n    this.log.info(\"CMD\", \"BUILD\");\n    yield this._run(buildCommand);\n});\n\nCMake.prototype.getCleanCommand = function () {\n    return this.path + \" -E remove_directory \\\"\" + this.workDir + \"\\\"\";\n};\n\nCMake.prototype.clean = function () {\n    this.verifyIfAvailable();\n\n    this.log.info(\"CMD\", \"CLEAN\");\n    return this._run(this.getCleanCommand());\n};\n\nCMake.prototype.reconfigure = async(function* () {\n    yield this.clean();\n    yield this.configure();\n});\n\nCMake.prototype.rebuild = async(function* () {\n    yield this.clean();\n    yield this.build();\n});\n\nCMake.prototype.compile = async(function* () {\n    try {\n        yield this.build();\n    }\n    catch (e) {\n        _.noop(e);\n        this.log.info(\"REP\", \"Build has been failed, trying to do a full rebuild.\");\n        yield this.rebuild();\n    }\n});\n\nCMake.prototype._run = function (command) {\n    this.log.info(\"RUN\", command);\n    return processHelpers.run(command, {silent: this.silent});\n};\n\nmodule.exports = CMake;\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/environment.js":"\"use strict\";\r\nlet os = require(\"os\");\r\nlet isIOJS = require(\"is-iojs\");\r\nlet which = require(\"which\");\r\nlet _ = require(\"lodash\");\r\n\r\nlet environment = module.exports = {\r\n    moduleVersion: require(\"../../package.json\").version,\r\n    platform: os.platform(),\r\n    isWin: os.platform() === \"win32\",\r\n    isLinux: os.platform() === \"linux\",\r\n    isOSX: os.platform() === \"darwin\",\r\n    arch: os.arch(),\r\n    isX86: os.arch() === \"ia32\",\r\n    isX64: os.arch() === \"x64\",\r\n    isArm: os.arch() === \"arm\",\r\n    runtime: isIOJS ? \"iojs\" : \"node\",\r\n    runtimeVersion: process.versions.node,\r\n    home: process.env[(os.platform() === \"win32\") ? \"USERPROFILE\" : \"HOME\"],\r\n    EOL: os.EOL\r\n};\r\n\r\nObject.defineProperties(environment, {\r\n    isPosix: {\r\n        get: function () {\r\n            return !this.isWin;\r\n        }\r\n    },\r\n    _isNinjaAvailable: {\r\n        value: null,\r\n        writable: true\r\n    },\r\n    isNinjaAvailable: {\r\n        get: function() {\r\n            if (this._isNinjaAvailable === null) {\r\n                this._isNinjaAvailable = false;\r\n                try {\r\n                    if (which.sync(\"ninja\")) {\r\n                        this._isNinjaAvailable = true;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _.noop(e);\r\n                }\r\n            }\r\n            return this._isNinjaAvailable;\r\n        }\r\n    },\r\n    _isMakeAvailable: {\r\n        value: null,\r\n        writable: true\r\n    },\r\n    isMakeAvailable: {\r\n        get: function() {\r\n            if (this._isMakeAvailable === null) {\r\n                this._isMakeAvailable = false;\r\n                try {\r\n                    if (which.sync(\"make\")) {\r\n                        this._isMakeAvailable = true;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _.noop(e);\r\n                }\r\n            }\r\n            return this._isMakeAvailable;\r\n        }\r\n    },\r\n    _isGPPAvailable: {\r\n        value: null,\r\n        writable: true\r\n    },\r\n    isGPPAvailable: {\r\n        get: function() {\r\n            if (this._isGPPAvailable === null) {\r\n                this._isGPPAvailable = false;\r\n                try {\r\n                    if (which.sync(\"g++\")) {\r\n                        this._isGPPAvailable = true;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _.noop(e);\r\n                }\r\n            }\r\n            return this._isGPPAvailable;\r\n        }\r\n    },\r\n    _isClangAvailable: {\r\n        value: null,\r\n        writable: true\r\n    },\r\n    isClangAvailable: {\r\n        get: function() {\r\n            if (this._isClangAvailable === null) {\r\n                this._isClangAvailable = false;\r\n                try {\r\n                    if (which.sync(\"clang++\")) {\r\n                        this._isClangAvailable = true;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    _.noop(e);\r\n                }\r\n            }\r\n            return this._isClangAvailable;\r\n        }\r\n    }\r\n});","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/dist.js":"\"use strict\";\r\nlet environment = require(\"./environment\");\r\nlet path = require(\"path\");\r\nlet urljoin = require(\"url-join\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet fs = Bluebird.promisifyAll(require(\"fs-extra\"));\r\nlet _ = require(\"lodash\");\r\nlet CMLog = require(\"./cmLog\");\r\nlet TargetOptions = require(\"./targetOptions\");\r\nlet runtimePaths = require(\"./runtimePaths\");\r\nlet async = Bluebird.coroutine;\r\nlet Downloader = require(\"./downloader\");\r\n\r\nfunction testSum(sums, sum, fPath) {\r\n    let serverSum = _.first(sums.filter(function (s) {\r\n        return s.getPath === fPath;\r\n    }));\r\n    if (serverSum && serverSum.sum === sum) {\r\n        return;\r\n    }\r\n    throw new Error(\"SHA sum of file '\" + fPath + \"' mismatch!\");\r\n}\r\n\r\nfunction Dist(options) {\r\n    this.options = options || {};\r\n    this.log = new CMLog(this.options);\r\n    this.targetOptions = new TargetOptions(this.options);\r\n    this.downloader = new Downloader(this.options);\r\n}\r\n\r\n// Props\r\nObject.defineProperties(Dist.prototype, {\r\n    internalPath: {\r\n        get: function () {\r\n            return path.join(\r\n                environment.home,\r\n                \".cmake-js\",\r\n                (this.targetOptions.runtime) + \"-\" + this.targetOptions.arch,\r\n                \"v\" + this.targetOptions.runtimeVersion);\r\n        }\r\n    },\r\n    externalPath: {\r\n        get: function () {\r\n            return runtimePaths.get(this.targetOptions).externalPath;\r\n        }\r\n    },\r\n    downloaded: {\r\n        get: function () {\r\n            let headers = false;\r\n            let libs = true;\r\n            let stat = getStat(this.internalPath);\r\n            if (stat.isDirectory()) {\r\n                if (this.headerOnly) {\r\n                    stat = getStat(path.join(this.internalPath, \"include/node/node.h\"));\r\n                    headers = stat.isFile();\r\n                }\r\n                else {\r\n                    stat = getStat(path.join(this.internalPath, \"src/node.h\"));\r\n                    if (stat.isFile()) {\r\n                        stat = getStat(path.join(this.internalPath, \"deps/v8/include/v8.h\"));\r\n                        headers = stat.isFile();\r\n                    }\r\n                }\r\n                if (environment.isWin) {\r\n                    for (let libPath of this.winLibs) {\r\n                        stat = getStat(libPath);\r\n                        libs = libs && stat.isFile();\r\n                    }\r\n                }\r\n            }\r\n            return headers && libs;\r\n\r\n            function getStat(path) {\r\n                try {\r\n                    return fs.statSync(path);\r\n                }\r\n                catch (e) {\r\n                    return {\r\n                        isFile: _.constant(false),\r\n                        isDirectory: _.constant(false)\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    },\r\n    winLibs: {\r\n        get: function () {\r\n            let libs = runtimePaths.get(this.targetOptions).winLibs;\r\n            let result = [];\r\n            for (let lib of libs) {\r\n                result.push(path.join(this.internalPath, lib.dir, lib.name));\r\n            }\r\n            return result;\r\n        }\r\n    },\r\n    headerOnly: {\r\n        get: function () {\r\n            return runtimePaths.get(this.targetOptions).headerOnly;\r\n        }\r\n    }\r\n});\r\n\r\n// Methods\r\nDist.prototype.ensureDownloaded = async(function* () {\r\n    if (!this.downloaded) {\r\n        yield this.download();\r\n    }\r\n});\r\n\r\nDist.prototype.download = async(function* () {\r\n    let log = this.log;\r\n    log.info(\"DIST\", \"Downloading distribution files.\");\r\n    yield fs.mkdirpAsync(this.internalPath);\r\n    let sums = yield this._downloadShaSums();\r\n    yield Bluebird.all([this._downloadLibs(sums), this._downloadTar(sums)]);\r\n});\r\n\r\nDist.prototype._downloadShaSums = async(function* () {\r\n    if (this.targetOptions.runtime === \"node\" || this.targetOptions.runtime === \"iojs\") {\r\n        let sumUrl = urljoin(this.externalPath, \"SHASUMS256.txt\");\r\n        let log = this.log;\r\n        log.http(\"DIST\", \"\\t- \" + sumUrl);\r\n        return (yield this.downloader.downloadString(sumUrl))\r\n            .split(\"\\n\")\r\n            .map(function (line) {\r\n                let parts = line.split(/\\s+/);\r\n                return {\r\n                    getPath: parts[1],\r\n                    sum: parts[0]\r\n                };\r\n            })\r\n            .filter(function (i) {\r\n                return i.getPath && i.sum;\r\n            });\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n});\r\n\r\nDist.prototype._downloadTar = async(function* (sums) {\r\n    let log = this.log;\r\n    let self = this;\r\n    let tarLocalPath = runtimePaths.get(self.targetOptions).tarPath;\r\n    let tarUrl = urljoin(self.externalPath, tarLocalPath);\r\n    log.http(\"DIST\", \"\\t- \" + tarUrl);\r\n\r\n    let sum = yield this.downloader.downloadTgz(tarUrl, {\r\n        hash: sums ? \"sha256\" : null,\r\n        path: self.internalPath,\r\n        strip: 1,\r\n        filter: function () {\r\n            if (this.path === self.internalPath) {\r\n                return true;\r\n            }\r\n            let ext = path.extname(this.path);\r\n            return ext && ext.toLowerCase() === \".h\";\r\n        }\r\n    });\r\n\r\n    if (sums) {\r\n        testSum(sums, sum, tarLocalPath);\r\n    }\r\n});\r\n\r\nDist.prototype._downloadLibs = async(function* (sums) {\r\n    const log = this.log;\r\n    const self = this;\r\n    if (!environment.isWin) {\r\n        return;\r\n    }\r\n\r\n    const paths = runtimePaths.get(self.targetOptions);\r\n    for (const dirs of paths.winLibs) {\r\n        const subDir = dirs.dir;\r\n        const fn = dirs.name;\r\n        const fPath = subDir ? urljoin(subDir, fn) : fn;\r\n        const libUrl = urljoin(self.externalPath, fPath);\r\n        log.http(\"DIST\", \"\\t- \" + libUrl);\r\n\r\n        yield fs.mkdirpAsync(path.join(self.internalPath, subDir));\r\n\r\n        const sum = yield this.downloader.downloadFile(libUrl, {\r\n            path: path.join(self.internalPath, fPath),\r\n            hash: sums ? \"sha256\" : null\r\n        });\r\n\r\n        if (sums) {\r\n            testSum(sums, sum, fPath);\r\n        }\r\n    }\r\n});\r\n\r\nmodule.exports = Dist;\r\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/cmLog.js":"\"use strict\";\r\nlet log = require(\"npmlog\");\r\n\r\nfunction CMLog(options) {\r\n    this.options = options || {};\r\n    this.debug = require(\"debug\")(this.options.logName || \"cmake-js\");\r\n}\r\n\r\nObject.defineProperties(CMLog.prototype, {\r\n    level: {\r\n        get: function() {\r\n            if (this.options.noLog) {\r\n                return \"silly\";\r\n            }\r\n            else {\r\n                return log.level;\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nCMLog.prototype.silly = function(cat, msg) {\r\n    if (this.options.noLog) {\r\n        this.debug(cat + \": \" + msg);\r\n    }\r\n    else {\r\n        log.silly(cat, msg);\r\n    }\r\n};\r\n\r\nCMLog.prototype.verbose = function(cat, msg) {\r\n    if (this.options.noLog) {\r\n        this.debug(cat + \": \" + msg);\r\n    }\r\n    else {\r\n        log.verbose(cat, msg);\r\n    }\r\n};\r\n\r\nCMLog.prototype.info = function(cat, msg) {\r\n    if (this.options.noLog) {\r\n        this.debug(cat + \": \" + msg);\r\n    }\r\n    else {\r\n        log.info(cat, msg);\r\n    }\r\n};\r\n\r\nCMLog.prototype.warn = function(cat, msg) {\r\n    if (this.options.noLog) {\r\n        this.debug(cat + \": \" + msg);\r\n    }\r\n    else {\r\n        log.warn(cat, msg);\r\n    }\r\n};\r\n\r\nCMLog.prototype.http = function(cat, msg) {\r\n    if (this.options.noLog) {\r\n        this.debug(cat + \": \" + msg);\r\n    }\r\n    else {\r\n        log.http(cat, msg);\r\n    }\r\n};\r\n\r\nCMLog.prototype.error = function(cat, msg) {\r\n    if (this.options.noLog) {\r\n        this.debug(cat + \": \" + msg);\r\n    }\r\n    else {\r\n        log.error(cat, msg);\r\n    }\r\n};\r\n\r\nmodule.exports = CMLog;","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/targetOptions.js":"\"use strict\";\r\n\r\nlet environment = require(\"./environment\");\r\nlet _ = require(\"lodash\");\r\n\r\nfunction TargetOptions(options) {\r\n    this.options = options || {};\r\n}\r\n\r\nObject.defineProperties(TargetOptions.prototype, {\r\n    arch: {\r\n        get: function () {\r\n            return this.options.arch || environment.arch;\r\n        }\r\n    },\r\n    isX86: {\r\n        get: function () {\r\n            return this.arch === \"ia32\";\r\n        }\r\n    },\r\n    isX64: {\r\n        get: function () {\r\n            return this.arch === \"x64\";\r\n        }\r\n    },\r\n    isArm: {\r\n        get: function () {\r\n            return this.arch === \"arm\";\r\n        }\r\n    },\r\n    runtime: {\r\n        get: function () {\r\n            return this.options.runtime || environment.runtime;\r\n        }\r\n    },\r\n    runtimeVersion: {\r\n        get: function () {\r\n            return this.options.runtimeVersion || environment.runtimeVersion;\r\n        }\r\n    }\r\n});\r\n\r\nmodule.exports = TargetOptions;","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/runtimePaths.js":"\"use strict\";\r\nlet _ = require(\"lodash\");\r\nlet assert = require(\"assert\");\r\nlet semver = require(\"semver\");\r\n\r\nlet runtimePaths = {\r\n    node: function (targetOptions) {\r\n        if (semver.lt(targetOptions.runtimeVersion, \"4.0.0\")) {\r\n            return {\r\n                externalPath: \"http://nodejs.org/dist/v\" + targetOptions.runtimeVersion + \"/\",\r\n                winLibs: [{\r\n                    dir: targetOptions.isX64 ? \"x64\" : \"\",\r\n                    name: targetOptions.runtime + \".lib\" \r\n                }],\r\n                tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\r\n                headerOnly: false\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                externalPath: \"http://nodejs.org/dist/v\" + targetOptions.runtimeVersion + \"/\",\r\n                winLibs: [{\r\n                    dir: targetOptions.isX64 ? \"win-x64\" : \"win-x86\",\r\n                    name: targetOptions.runtime + \".lib\" \r\n                }],\r\n                tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \"-headers.tar.gz\",\r\n                headerOnly: true\r\n            };\r\n        }\r\n    },\r\n    iojs: function (targetOptions) {\r\n        return {\r\n            externalPath: \"https://iojs.org/dist/v\" + targetOptions.runtimeVersion + \"/\",\r\n            winLibs: [{\r\n                dir: targetOptions.isX64 ? \"win-x64\" : \"win-x86\",\r\n                name: targetOptions.runtime + \".lib\" \r\n            }],\r\n            tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\r\n            headerOnly: false\r\n        };\r\n    },\r\n    nw: function (targetOptions) {\r\n        if (semver.gte(targetOptions.runtimeVersion, \"0.13.0\")) {\r\n            return {\r\n                externalPath: \"http://node-webkit.s3.amazonaws.com/v\" + targetOptions.runtimeVersion + \"/\",\r\n                winLibs: [\r\n                    {\r\n                        dir: targetOptions.isX64 ? \"x64\" : \"\",\r\n                        name: targetOptions.runtime + \".lib\"\r\n                    },\r\n                    {\r\n                        dir: targetOptions.isX64 ? \"x64\" : \"\",\r\n                        name: \"node.lib\"\r\n                    }\r\n                ],\r\n                tarPath: \"nw-headers-v\" + targetOptions.runtimeVersion + \".tar.gz\",\r\n                headerOnly: false\r\n            };\r\n        }\r\n        return {\r\n            externalPath: \"http://node-webkit.s3.amazonaws.com/v\" + targetOptions.runtimeVersion + \"/\",\r\n            winLibs: [{\r\n                dir: targetOptions.isX64 ? \"x64\" : \"\",\r\n                name: targetOptions.runtime + \".lib\" \r\n            }],\r\n            tarPath: \"nw-headers-v\" + targetOptions.runtimeVersion + \".tar.gz\",\r\n            headerOnly: false\r\n        };\r\n    },\r\n    electron: function (targetOptions) {\r\n        return {\r\n            externalPath: \"http://atom.io/download/atom-shell/v\" + targetOptions.runtimeVersion + \"/\",\r\n            winLibs: [{\r\n                dir: targetOptions.isX64 ? \"x64\" : \"\",\r\n                name: \"node.lib\"\r\n            }],\r\n            tarPath: \"node\" + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\r\n            headerOnly: false\r\n        };\r\n    },\r\n    get: function (targetOptions) {\r\n        assert(_.isObject(targetOptions));\r\n\r\n        let runtime = targetOptions.runtime;\r\n        let func = runtimePaths[runtime];\r\n        let paths;\r\n        if (_.isFunction(func) && _.isPlainObject(paths = func(targetOptions))) {\r\n            return paths;\r\n        }\r\n        throw new Error(\"Unknown runtime: \" + runtime);\r\n    }\r\n};\r\n\r\nmodule.exports = runtimePaths;","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/downloader.js":"\"use strict\";\r\nlet Bluebird = require(\"bluebird\");\r\nlet crypto = require(\"crypto\");\r\nlet request = require(\"request\");\r\nlet async = Bluebird.coroutine;\r\nlet MemoryStream = require(\"memory-stream\");\r\nlet zlib = require(\"zlib\");\r\nlet tar = require(\"tar\");\r\nlet fs = Bluebird.promisifyAll(require(\"fs-extra\"));\r\nlet _ = require(\"lodash\");\r\nlet unzip = require(\"unzip\");\r\nlet CMLog = require(\"./cmLog\");\r\n\r\nfunction Downloader(options) {\r\n    this.options = options || {};\r\n    this.log = new CMLog(this.options);\r\n}\r\n\r\nDownloader.prototype.downloadToStream = function(url, stream, hash) {\r\n    let self = this;\r\n    let shasum = hash ? crypto.createHash(hash) : null;\r\n    return new Bluebird(function (resolve, reject) {\r\n        let length = 0;\r\n        let done = 0;\r\n        let lastPercent = 0;\r\n        request\r\n            .get(url)\r\n            .on(\"error\", function (err) {\r\n                reject(err);\r\n            })\r\n            .on(\"response\", function(data) {\r\n                length = parseInt(data.headers[\"content-length\"]);\r\n                if (!_.isNumber(length)) {\r\n                    length = 0;\r\n                }\r\n            })\r\n            .on(\"data\", function (chunk) {\r\n                if (shasum) {\r\n                    shasum.update(chunk);\r\n                }\r\n                if (length) {\r\n                    done += chunk.length;\r\n                    let percent = done / length * 100;\r\n                    percent = Math.round(percent / 10) * 10 + 10;\r\n                    if (percent > lastPercent) {\r\n                        self.log.verbose(\"DWNL\", \"\\t\" + lastPercent + \"%\");\r\n                        lastPercent = percent;\r\n                    }\r\n                }\r\n            })\r\n            .pipe(stream);\r\n\r\n        stream.once(\"error\", function (err) {\r\n            reject(err);\r\n        });\r\n\r\n        stream.once(\"finish\", function () {\r\n            resolve(shasum ? shasum.digest(\"hex\") : undefined);\r\n        });\r\n    });\r\n};\r\n\r\nDownloader.prototype.downloadString = async(function* (url) {\r\n    let result = new MemoryStream();\r\n    yield this.downloadToStream(url, result);\r\n    return result.toString();\r\n});\r\n\r\nDownloader.prototype.downloadFile = async(function* (url, options) {\r\n    if (_.isString(options)) {\r\n        options.path = options;\r\n    }\r\n    let result = fs.createWriteStream(options.path);\r\n    let sum = yield this.downloadToStream(url, result, options.hash);\r\n    this.testSum(url, sum, options);\r\n    return sum;\r\n});\r\n\r\nDownloader.prototype.downloadTgz = async(function*(url, options) {\r\n    if (_.isString(options)) {\r\n        options.path = options;\r\n    }\r\n    let gunzip = zlib.createGunzip();\r\n    let extractor = new tar.Extract(options);\r\n    gunzip.pipe(extractor);\r\n    let sum =  yield this.downloadToStream(url, gunzip, options.hash);\r\n    this.testSum(url, sum, options);\r\n    return sum;\r\n});\r\n\r\nDownloader.prototype.downloadZip = async(function*(url, options) {\r\n    if (_.isString(options)) {\r\n        options.path = options;\r\n    }\r\n    let extractor = new unzip.Extract(options);\r\n    let sum =  yield this.downloadToStream(url, extractor, options.hash);\r\n    this.testSum(url, sum, options);\r\n    return sum;\r\n});\r\n\r\nDownloader.prototype.testSum = function(url, sum, options) {\r\n    if (options.hash && sum && options.sum && options.sum !== sum) {\r\n        throw new Error(options.hash.toUpperCase() + \" sum of download '\" + url + \"' mismatch!\");\r\n    }\r\n};\r\n\r\nmodule.exports = Downloader;","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/vsDetect.js":"\"use strict\";\r\nlet processHelpers = require(\"./processHelpers\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = Bluebird.coroutine;\r\nlet _ = require(\"lodash\");\r\n\r\nlet vsDetect = {\r\n    isInstalled: async(function* (version) {\r\n        return (yield this._isVSInstalled(version)) || (yield this._isBuildToolsInstalled(version));\r\n    }),\r\n    _isBuildToolsInstalled: async(function*(version) {\r\n        let mainVer = version.split(\".\")[0];\r\n        let key = \"HKLM\\\\SOFTWARE\\\\Classes\\\\Installer\\\\Dependencies\\\\Microsoft.VS.VisualCppBuildTools_x86_enu,v\" + mainVer;\r\n        let command = \"reg query \\\"\" + key + \"\\\"\";\r\n        try {\r\n            let stdout = yield processHelpers.exec(command);\r\n            return stdout && stdout.indexOf(\"Visual C++\") > 0;\r\n        }\r\n        catch (e) {\r\n            _.noop(e);\r\n        }\r\n        return false;\r\n    }),\r\n    _isVSInstalled: async(function*(version) {\r\n        // On x64 this will look for x64 keys only, but if VS and compilers installed properly,\r\n        // it will write it's keys to 64 bit registry as well.\r\n        let command = \"reg query \\\"HKLM\\\\Software\\\\Microsoft\\\\VisualStudio\\\\\" + version + \"\\\"\";\r\n        try {\r\n            let stdout = yield processHelpers.exec(command);\r\n            if (stdout) {\r\n                let lines = stdout.split(\"\\r\\n\").filter(function (line) {\r\n                    return line.length > 10;\r\n                });\r\n                if (lines.length >= 4) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            _.noop(e);\r\n        }\r\n        return false;\r\n    })\r\n};\r\n\r\nmodule.exports = vsDetect;\r\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/processHelpers.js":"\"use strict\";\nlet Bluebird = require(\"bluebird\");\nlet splitargs = require(\"splitargs\");\nlet _ = require(\"lodash\");\nlet spawn = require(\"child_process\").spawn;\nlet exec = require(\"child_process\").exec;\n\nlet processHelpers = {\n    run: function (command, options) {\n        options = _.defaults(options, {silent: false});\n        return new Bluebird(function (resolve, reject) {\n            let args = splitargs(command);\n            let name = args[0];\n            args.splice(0, 1);\n            let child = spawn(name, args, {stdio: options.silent ? \"ignore\" : \"inherit\"});\n            let ended = false;\n            child.on(\"error\", function (e) {\n                if (!ended) {\n                    reject(e);\n                    ended = true;\n                }\n            });\n            child.on(\"exit\", function (code, signal) {\n                if (!ended) {\n                    if (code === 0) {\n                        resolve();\n                    }\n                    else {\n                        reject(new Error(\"Process terminated: \" + code || signal));\n                    }\n                    ended = true;\n                }\n            });\n        });\n    },\n    exec: function(command) {\n        return new Bluebird(function (resolve, reject) {\n            exec(command, function (err, stdout, stderr) {\n                if (err) {\n                    reject(new Error(err.message + \"\\n\" + (stdout || stderr)));\n                }\n                else {\n                   resolve(stdout);\n                }\n            });\n        });\n    }\n};\n\nmodule.exports = processHelpers;\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/locateNAN.js":"\"use strict\";\r\nlet Bluebird = require(\"bluebird\");\r\nlet fs = Bluebird.promisifyAll(require(\"fs-extra\"));\r\nlet path = require(\"path\");\r\nlet async = Bluebird.coroutine;\r\nlet _ = require(\"lodash\");\r\n\r\nlet isNANModule = async(function* (dir) {\r\n    let h = path.join(dir, \"nan.h\");\r\n    try {\r\n        let stat = yield fs.statAsync(h);\r\n        return stat.isFile();\r\n    }\r\n    catch (e) {\r\n        _.noop(e);\r\n        return false;\r\n    }\r\n});\r\n\r\nlet isNodeJSProject = async(function* (dir) {\r\n    let pjson = path.join(dir, \"package.json\");\r\n    let node_modules = path.join(dir, \"node_modules\");\r\n    try {\r\n        let stat = yield fs.statAsync(pjson);\r\n        if (stat.isFile()) {\r\n            return true;\r\n        }\r\n        stat = yield fs.statAsync(node_modules);\r\n        if (stat.isDirectory()) {\r\n            return true;\r\n        }\r\n    }\r\n    catch (e) {\r\n        _.noop(e);\r\n    }\r\n    return false;\r\n});\r\n\r\nlet locateNAN = module.exports = async(function* (projectRoot) {\r\n    if (locateNAN.__projectRoot) {\r\n        projectRoot = locateNAN.__projectRoot;\r\n    }\r\n    let result = yield isNodeJSProject(projectRoot);\r\n    if (!result) {\r\n        return null;\r\n    }\r\n    let nanModulePath = path.join(projectRoot, \"node_modules\", \"nan\");\r\n    result = yield isNANModule(nanModulePath);\r\n    if (result) {\r\n        return nanModulePath;\r\n    }\r\n\r\n    // Goto upper level:\r\n    projectRoot = path.normalize(path.join(projectRoot, \"..\", \"..\"));\r\n    return yield locateNAN(projectRoot);\r\n});","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/toolset.js":"\"use strict\";\nlet Bluebird = require(\"bluebird\");\nlet async = Bluebird.coroutine;\nlet _ = require(\"lodash\");\nlet TargetOptions = require(\"./targetOptions\");\nlet environment = require(\"./environment\");\nlet assert = require(\"assert\");\nlet vsDetect = require(\"./vsDetect\");\nlet path = require(\"path\");\nlet CMLog = require(\"./cmLog\");\n\nfunction Toolset(options) {\n    this.options = options || {};\n    this.targetOptions = new TargetOptions(this.options);\n    this.generator = options.generator;\n    this.cCompilerPath = null;\n    this.cppCompilerPath = null;\n    this.compilerFlags = [];\n    this.linkerFlags = [];\n    this.makePath = null;\n    this.log = new CMLog(this.options);\n    this._initialized = false;\n}\n\nToolset.prototype.initialize = async(function*(install) {\n    if (!this._initialized) {\n        if (environment.isWin) {\n            yield this.initializeWin(install);\n        }\n        else {\n            this.initializePosix(install);\n        }\n        this._initialized = true;\n    }\n});\n\nToolset.prototype.initializePosix = function (install) {\n    // 1: Compiler\n    if (!environment.isGPPAvailable && !environment.isClangAvailable) {\n        if (environment.isOSX) {\n            throw new Error(\"C++ Compiler toolset is not available. Install Xcode Commandline Tools from Apple Dev Center, or install Clang with homebrew by invoking: 'brew install llvm --with-clang --with-asan'.\");\n        }\n        else {\n            throw new Error(\"C++ Compiler toolset is not available. Install proper compiler toolset with your package manager, eg. 'sudo apt-get install g++'.\");\n        }\n    }\n\n    if (this.options.preferClang && environment.isClangAvailable) {\n        if (install) {\n            this.log.info(\"TOOL\", \"Using clang++ compiler, because preferClang option is set, and clang++ is available.\");\n        }\n        this.cppCompilerPath = \"clang++\";\n        this.cCompilerPath = \"clang\";\n    }\n    else if (this.options.preferGnu && environment.isGPPAvailable) {\n        if (install) {\n            this.log.info(\"TOOL\", \"Using g++ compiler, because preferGnu option is set, and g++ is available.\");\n        }\n        this.cppCompilerPath = \"g++\";\n        this.cCompilerPath = \"gcc\";\n    }\n    // if it's already set because of options...\n    if (this.generator) { \n        if (install) {\n            this.log.info(\"TOOL\", \"Using \" + this.options.generator + \" generator, as specified from commandline.\");\n        }\n    }\n    // 2: Generator\n    else if (environment.isOSX) {\n        if (this.options.preferXcode) {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Xcode generator, because preferXcode option is set.\");\n            }\n            this.generator = \"Xcode\";\n        }\n        else if (this.options.preferMake && environment.isMakeAvailable) {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator, because preferMake option is set, and make is available.\");\n            }\n            this.generator = \"Unix Makefiles\";\n        }\n        else if (environment.isNinjaAvailable) {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Ninja generator, because ninja is available.\");\n            }\n            this.generator = \"Ninja\";\n        }\n        else {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator.\");\n            }\n            this.generator = \"Unix Makefiles\";\n        }\n    }\n    else {\n        if (this.options.preferMake && environment.isMakeAvailable) {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator, because preferMake option is set, and make is available.\");\n            }\n            this.generator = \"Unix Makefiles\";\n        }\n        else if (environment.isNinjaAvailable) {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Ninja generator, because ninja is available.\");\n            }\n            this.generator = \"Ninja\";\n        }\n        else {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator.\");\n            }\n            this.generator = \"Unix Makefiles\";\n        }\n    }\n\n    // 3: Flags\n    this._setupGNUStd(install);\n\n    if (environment.isOSX) {\n        if (install) {\n            this.log.verbose(\"TOOL\", \"Setting default OSX compiler flags.\");\n        }\n\n        this.compilerFlags.push(\"-D_DARWIN_USE_64_BIT_INODE=1\");\n        this.compilerFlags.push(\"-D_LARGEFILE_SOURCE\");\n        this.compilerFlags.push(\"-D_FILE_OFFSET_BITS=64\");\n        this.compilerFlags.push(\"-DBUILDING_NODE_EXTENSION\");\n        this.compilerFlags.push(\"-w\");\n        this.linkerFlags.push(\"-undefined dynamic_lookup\");\n    }\n};\n\nToolset.prototype._setupGNUStd = function (install) {\n    if (this.options.std) {\n        if (this.options.std !== \"c++98\") {\n            if (install) {\n                this.log.info(\"TOOL\", `Using ${this.options.std} compiler standard.`);\n            }\n            this.compilerFlags.push(\"-std=\" + this.options.std);\n        }\n    }\n    else {\n        if (install) {\n            this.log.info(\"TOOL\", \"Using c++11 compiler standard.\");\n        }\n        this.compilerFlags.push(\"-std=c++11\");\n    }\n};\n\nToolset.prototype.initializeWin = async(function*(install) {\n    // Visual Studio:\n    // if it's already set because of options...\n    if (this.generator) {\n        if (install) {\n            this.log.info(\"TOOL\", \"Using \" + this.options.generator + \" generator, as specified from commandline.\");\n        }\n        if (this.targetOptions.isX86) {\n            if (install) {\n                this.log.verbose(\"TOOL\", \"Setting SAFESEH:NO linker flag.\");\n            }\n            this.linkerFlags.push(\"/SAFESEH:NO\");\n        }\n        return;\n    }\n    let topVS = yield this._getTopSupportedVisualStudioGenerator();\n    //if (!this.options.noMSVC) {\n    if (topVS) {\n        if (install) {\n            this.log.info(\"TOOL\", `Using ${topVS} generator.`);\n        }\n        this.generator = topVS;\n        if (this.targetOptions.isX86) {\n            if (install) {\n                this.log.verbose(\"TOOL\", \"Setting SAFESEH:NO linker flag.\");\n            }\n            this.linkerFlags.push(\"/SAFESEH:NO\");\n        }\n    }\n    else {\n        throw new Error(\"There is no Visual C++ compiler installed. Install Visual C++ Build Toolset or Visual Studio.\");\n    }\n});\n\nToolset.prototype._getTopSupportedVisualStudioGenerator = async(function*() {\n    let CMake = require(\"./cMake\");\n    assert(environment.isWin);\n    let list = yield CMake.getGenerators(this.options);\n    let maxVer = 0;\n    let result = null;\n    for (let gen of list) {\n        let found = /^visual studio (\\d+)/i.exec(gen);\n        if (found) {\n            let ver = parseInt(found[1]);\n            if (ver > maxVer) {\n                if (yield vsDetect.isInstalled(ver + \".0\")) {\n                    result = this.targetOptions.isX64 ? (gen + \" Win64\") : gen;\n                    maxVer = ver;\n                }\n            }\n        }\n    }\n    return result;\n});\n\nmodule.exports = Toolset;\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es6/appCMakeJSConfig.js":"\"use strict\";\r\nlet path = require(\"path\");\r\nlet _ = require(\"lodash\");\r\n\r\nfunction getConfig(lookPath, log) {\r\n    let pjsonPath = path.join(lookPath, \"package.json\");\r\n    log.silly(\"CFG\", \"Looking for package.json in: '\" + pjsonPath + \"'.\");\r\n    try {\r\n        let json = require(pjsonPath);\r\n        log.silly(\"CFG\", \"Loaded:\\n\" + JSON.stringify(json));\r\n        if (_.isPlainObject(json) && _.isPlainObject(json[\"cmake-js\"])) {\r\n            log.silly(\"CFG\", \"Config found.\");\r\n            return json[\"cmake-js\"];\r\n        }\r\n        else {\r\n            log.silly(\"CFG\", \"Config not found.\");\r\n            return null;\r\n        }\r\n    }\r\n    catch (e) {\r\n        log.silly(\"CFG\", \"'package.json' not found.\");\r\n        return null;\r\n    }\r\n}\r\n\r\nmodule.exports = function (projectPath, log) {\r\n    log.verbose(\"CFG\", \"Looking for application level CMake.js config in '\" + projectPath + \".\");\r\n    let currPath = projectPath;\r\n    let lastConfig = null;\r\n    let currConfig;\r\n    for (; ;) {\r\n        currConfig = getConfig(currPath, log);\r\n        if (currConfig) {\r\n            lastConfig = currConfig;\r\n        }\r\n        try {\r\n            log.silly(\"CFG\", \"Looking for parent path.\");\r\n            let lastPath = currPath;\r\n            currPath = path.normalize(path.join(currPath, \"..\"));\r\n            if (lastPath === currPath) {\r\n                currPath = null; // root\r\n            }\r\n            if (currPath) {\r\n                log.silly(\"CFG\", \"Parent path: '\" + currPath + \"'.\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            log.silly(\"CFG\", \"Exception:\\n\" + e.stack);\r\n            break;\r\n        }\r\n        if (currPath === null) {\r\n            log.silly(\"CFG\", \"Parent path with package.json file doesn't exists. Done.\");\r\n            break;\r\n        }\r\n    }\r\n    if (lastConfig) {\r\n        log.verbose(\"CFG\", \"Application level CMake.js config found:\\n\" + JSON.stringify(lastConfig));\r\n    }\r\n    else {\r\n        log.verbose(\"CFG\", \"Application level CMake.js config doesn't exists.\");\r\n    }\r\n    return lastConfig;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/gulpfile.js":"var gulp = require(\"gulp\");\r\nvar traceur = require(\"gulp-traceur\");\r\nvar gulpSequence = require(\"gulp-sequence\");\r\nvar exec = require(\"child_process\").exec;\r\nvar sourcemaps = require(\"gulp-sourcemaps\");\r\n\r\ngulp.task(\"compile-test\", function () {\r\n    return gulp.src(\"tests/es6/**/*.js\", {base: \"tests/es6\"})\r\n        .pipe(sourcemaps.init())\r\n        .pipe(traceur())\r\n        .pipe(sourcemaps.write(\".\"))\r\n        .pipe(gulp.dest(\"tests/es5\"));\r\n});\r\n\r\ngulp.task(\"compile-lib\", function () {\r\n    return gulp.src(\"lib/es6/**/*.js\", {base: \"lib/es6\"})\r\n        .pipe(sourcemaps.init())\r\n        .pipe(traceur())\r\n        .pipe(sourcemaps.write(\".\"))\r\n        .pipe(gulp.dest(\"lib/es5\"));\r\n});\r\n\r\ngulp.task(\"compile\", gulpSequence([\"compile-test\", \"compile-lib\"]));\r\n\r\ngulp.task(\"default\", gulpSequence(\"compile\"));\r\n\r\ngulp.task(\"npm-publish\", function (done) {\r\n    exec(\"npm publish\").on(\"close\", function(e) {\r\n        if (e) {\r\n            done(new Error(\"Cannot publish to the npm. Exit code: \" + e + \".\"));\r\n        }\r\n        else {\r\n            done();\r\n        }\r\n    });\r\n});\r\n\r\ngulp.task(\"publish\", gulpSequence(\"compile\", \"npm-publish\"));","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/appCMakeJSConfig.js":"\"use strict\";\nvar path = require(\"path\");\nvar _ = require(\"lodash\");\nfunction getConfig(lookPath, log) {\n  var pjsonPath = path.join(lookPath, \"package.json\");\n  log.silly(\"CFG\", \"Looking for package.json in: '\" + pjsonPath + \"'.\");\n  try {\n    var json = require(pjsonPath);\n    log.silly(\"CFG\", \"Loaded:\\n\" + JSON.stringify(json));\n    if (_.isPlainObject(json) && _.isPlainObject(json[\"cmake-js\"])) {\n      log.silly(\"CFG\", \"Config found.\");\n      return json[\"cmake-js\"];\n    } else {\n      log.silly(\"CFG\", \"Config not found.\");\n      return null;\n    }\n  } catch (e) {\n    log.silly(\"CFG\", \"'package.json' not found.\");\n    return null;\n  }\n}\nmodule.exports = function(projectPath, log) {\n  log.verbose(\"CFG\", \"Looking for application level CMake.js config in '\" + projectPath + \".\");\n  var currPath = projectPath;\n  var lastConfig = null;\n  var currConfig;\n  for (; ; ) {\n    currConfig = getConfig(currPath, log);\n    if (currConfig) {\n      lastConfig = currConfig;\n    }\n    try {\n      log.silly(\"CFG\", \"Looking for parent path.\");\n      var lastPath = currPath;\n      currPath = path.normalize(path.join(currPath, \"..\"));\n      if (lastPath === currPath) {\n        currPath = null;\n      }\n      if (currPath) {\n        log.silly(\"CFG\", \"Parent path: '\" + currPath + \"'.\");\n      }\n    } catch (e) {\n      log.silly(\"CFG\", \"Exception:\\n\" + e.stack);\n      break;\n    }\n    if (currPath === null) {\n      log.silly(\"CFG\", \"Parent path with package.json file doesn't exists. Done.\");\n      break;\n    }\n  }\n  if (lastConfig) {\n    log.verbose(\"CFG\", \"Application level CMake.js config found:\\n\" + JSON.stringify(lastConfig));\n  } else {\n    log.verbose(\"CFG\", \"Application level CMake.js config doesn't exists.\");\n  }\n  return lastConfig;\n};\n\n//# sourceMappingURL=appCMakeJSConfig.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/buildSystem.js":"\"use strict\";\nvar CMake = require(\"./cMake\");\nvar Dist = require(\"./dist\");\nvar CMLog = require(\"./cmLog\");\nvar appCMakeJSConfig = require(\"./appCMakeJSConfig\");\nvar path = require(\"path\");\nvar _ = require(\"lodash\");\nvar Bluebird = require(\"bluebird\");\nvar async = Bluebird.coroutine;\nvar Toolset = require(\"./toolset\");\nfunction BuildSystem(options) {\n  this.options = options || {};\n  this.options.directory = path.resolve(this.options.directory || process.cwd());\n  this.log = new CMLog(this.options);\n  var appConfig = appCMakeJSConfig(this.options.directory, this.log);\n  if (_.isPlainObject(appConfig)) {\n    if (_.keys(appConfig).length) {\n      this.log.verbose(\"CFG\", \"Applying CMake.js config from root package.json:\");\n      this.log.verbose(\"CFG\", JSON.stringify(appConfig));\n      this.options.runtime = this.options.runtime || appConfig.runtime;\n      this.options.runtimeVersion = this.options.runtimeVersion || appConfig.runtimeVersion;\n      this.options.arch = this.options.arch || appConfig.arch;\n    }\n  }\n  this.log.verbose(\"CFG\", \"Build system options:\");\n  this.log.verbose(\"CFG\", JSON.stringify(this.options));\n  this.cmake = new CMake(this.options);\n  this.dist = new Dist(this.options);\n  this.toolset = new Toolset(this.options);\n}\nBuildSystem.prototype._ensureInstalled = async($traceurRuntime.initGeneratorFunction(function $__1() {\n  var e;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          $ctx.pushTry(9, null);\n          $ctx.state = 12;\n          break;\n        case 12:\n          $ctx.state = 2;\n          return this.toolset.initialize(true);\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.state = 6;\n          return this.dist.ensureDownloaded();\n        case 6:\n          $ctx.maybeThrow();\n          $ctx.state = 8;\n          break;\n        case 8:\n          $ctx.popTry();\n          $ctx.state = -2;\n          break;\n        case 9:\n          $ctx.popTry();\n          $ctx.maybeUncatchable();\n          e = $ctx.storedException;\n          $ctx.state = 15;\n          break;\n        case 15:\n          this._showError(e);\n          throw e;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__1, this);\n}));\nBuildSystem.prototype._showError = function(e) {\n  if (this.log.level === \"verbose\" || this.log.level === \"silly\") {\n    this.log.error(\"OMG\", e.stack);\n  } else {\n    this.log.error(\"OMG\", e.message);\n  }\n};\nBuildSystem.prototype.install = function() {\n  return this._ensureInstalled();\n};\nBuildSystem.prototype._invokeCMake = async($traceurRuntime.initGeneratorFunction(function $__2(method) {\n  var $__3,\n      $__4,\n      $__5,\n      $__6,\n      e;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          $ctx.pushTry(13, null);\n          $ctx.state = 16;\n          break;\n        case 16:\n          $ctx.state = 2;\n          return this._ensureInstalled();\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = 4;\n          break;\n        case 4:\n          $__3 = this.cmake;\n          $__4 = $__3[method];\n          $__5 = $__4.call($__3);\n          $ctx.state = 10;\n          break;\n        case 10:\n          $ctx.state = 6;\n          return $__5;\n        case 6:\n          $__6 = $ctx.sent;\n          $ctx.state = 8;\n          break;\n        case 8:\n          $ctx.returnValue = $__6;\n          $ctx.state = -2;\n          break;\n        case 12:\n          $ctx.popTry();\n          $ctx.state = -2;\n          break;\n        case 13:\n          $ctx.popTry();\n          $ctx.maybeUncatchable();\n          e = $ctx.storedException;\n          $ctx.state = 19;\n          break;\n        case 19:\n          this._showError(e);\n          throw e;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__2, this);\n}));\nBuildSystem.prototype.getConfigureCommand = function() {\n  return this._invokeCMake(\"getConfigureCommand\");\n};\nBuildSystem.prototype.configure = function() {\n  return this._invokeCMake(\"configure\");\n};\nBuildSystem.prototype.getBuildCommand = function() {\n  return this._invokeCMake(\"getBuildCommand\");\n};\nBuildSystem.prototype.build = function() {\n  return this._invokeCMake(\"build\");\n};\nBuildSystem.prototype.getCleanCommand = function() {\n  return this._invokeCMake(\"getCleanCommand\");\n};\nBuildSystem.prototype.clean = function() {\n  return this._invokeCMake(\"clean\");\n};\nBuildSystem.prototype.reconfigure = function() {\n  return this._invokeCMake(\"reconfigure\");\n};\nBuildSystem.prototype.rebuild = function() {\n  return this._invokeCMake(\"rebuild\");\n};\nBuildSystem.prototype.compile = function() {\n  return this._invokeCMake(\"compile\");\n};\nmodule.exports = BuildSystem;\n\n//# sourceMappingURL=buildSystem.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/cMake.js":"\"use strict\";\nvar splitargs = require(\"splitargs\");\nvar which = require(\"which\");\nvar Bluebird = require(\"bluebird\");\nvar fs = Bluebird.promisifyAll(require(\"fs-extra\"));\nvar path = require(\"path\");\nvar _ = require(\"lodash\");\nvar environment = require(\"./environment\");\nvar Dist = require(\"./dist\");\nvar CMLog = require(\"./cmLog\");\nvar vsDetect = require(\"./vsDetect\");\nvar TargetOptions = require(\"./targetOptions\");\nvar processHelpers = require(\"./processHelpers\");\nvar locateNAN = require(\"./locateNAN\");\nvar npmconf = Bluebird.promisifyAll(require(\"npmconf\"));\nvar async = Bluebird.coroutine;\nvar Toolset = require(\"./toolset\");\nfunction CMake(options) {\n  this.options = options || {};\n  this.log = new CMLog(this.options);\n  this.dist = new Dist(this.options);\n  this.projectRoot = path.resolve(this.options.directory || process.cwd());\n  this.workDir = this.options.out || path.join(this.projectRoot, \"build\");\n  this.config = this.options.debug ? \"Debug\" : \"Release\";\n  this.buildDir = path.join(this.workDir, this.config);\n  this._isAvailable = null;\n  this.targetOptions = new TargetOptions(this.options);\n  this.toolset = new Toolset(this.options);\n  this.cMakeOptions = this.options.cMakeOptions || {};\n  this.silent = !!options.silent;\n}\nObject.defineProperties(CMake.prototype, {\n  path: {get: function() {\n      return this.options.cmakePath || \"cmake\";\n    }},\n  isAvailable: {get: function() {\n      if (this._isAvailable === null) {\n        this._isAvailable = CMake.isAvailable(this.options);\n      }\n      return this._isAvailable;\n    }}\n});\nCMake.isAvailable = function(options) {\n  options = options || {};\n  try {\n    if (options.cmakePath) {\n      var stat = fs.lstatSync(options.cmakePath);\n      return !stat.isDirectory();\n    } else {\n      which.sync(\"cmake\");\n      return true;\n    }\n  } catch (e) {\n    _.noop(e);\n  }\n  return false;\n};\nCMake.getGenerators = async($traceurRuntime.initGeneratorFunction(function $__16(options) {\n  var arch,\n      gens,\n      stdout,\n      hasCr,\n      output,\n      on;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          arch = \" [arch]\";\n          options = options || {};\n          gens = [];\n          $ctx.state = 11;\n          break;\n        case 11:\n          $ctx.state = (CMake.isAvailable(options)) ? 1 : 6;\n          break;\n        case 1:\n          $ctx.state = 2;\n          return processHelpers.exec((options.cmakePath || \"cmake\") + \" --help\");\n        case 2:\n          stdout = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          hasCr = stdout.includes(\"\\r\\n\");\n          output = hasCr ? stdout.split(\"\\r\\n\") : stdout.split(\"\\n\");\n          on = false;\n          output.forEach(function(line, i) {\n            if (on) {\n              var parts = line.split(\"=\");\n              if ((parts.length === 2 && parts[0].trim()) || (parts.length === 1 && i !== output.length - 1 && output[i + 1].trim()[0] === \"=\")) {\n                var gen = parts[0].trim();\n                if (_.endsWith(gen, arch)) {\n                  gen = gen.substr(0, gen.length - arch.length);\n                }\n                gens.push(gen);\n              }\n            }\n            if (line.trim() === \"Generators\") {\n              on = true;\n            }\n          });\n          $ctx.state = 6;\n          break;\n        case 6:\n          $ctx.returnValue = gens;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__16, this);\n}));\nCMake.prototype.getGenerators = function() {\n  return CMake.getGenerators(this.options);\n};\nCMake.prototype.verifyIfAvailable = function() {\n  if (!this.isAvailable) {\n    throw new Error(\"CMake executable is not found. Please use your system's package manager to install it, or you can get installers from there: http://cmake.org.\");\n  }\n};\nCMake.prototype.getConfigureCommand = async($traceurRuntime.initGeneratorFunction(function $__17() {\n  var $__1,\n      command,\n      D,\n      incPaths,\n      nodeH,\n      v8H,\n      uvH,\n      nanH,\n      libs,\n      $__5,\n      $__6,\n      $__7,\n      $__3,\n      $__2,\n      k,\n      npmConfig,\n      npmConfigData,\n      $__12,\n      $__13,\n      $__14,\n      $__10,\n      $__9,\n      key,\n      ukey,\n      s,\n      sk;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          command = this.path;\n          command += \" \\\"\" + this.projectRoot + \"\\\" --no-warn-unused-cli\";\n          D = [];\n          D.push({\"CMAKE_JS_VERSION\": environment.moduleVersion});\n          D.push({\"CMAKE_BUILD_TYPE\": this.config});\n          if (environment.isWin) {\n            D.push({\"CMAKE_RUNTIME_OUTPUT_DIRECTORY\": this.workDir});\n          } else {\n            D.push({\"CMAKE_LIBRARY_OUTPUT_DIRECTORY\": this.buildDir});\n          }\n          if (this.dist.headerOnly) {\n            incPaths = [path.join(this.dist.internalPath, \"/include/node\")];\n          } else {\n            nodeH = path.join(this.dist.internalPath, \"/src\");\n            v8H = path.join(this.dist.internalPath, \"/deps/v8/include\");\n            uvH = path.join(this.dist.internalPath, \"/deps/uv/include\");\n            incPaths = [nodeH, v8H, uvH];\n          }\n          $ctx.state = 16;\n          break;\n        case 16:\n          $ctx.state = 2;\n          return locateNAN(this.projectRoot);\n        case 2:\n          nanH = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          if (nanH) {\n            incPaths.push(nanH);\n          }\n          D.push({\"CMAKE_JS_INC\": incPaths.join(\";\")});\n          D.push({\"NODE_RUNTIME\": this.targetOptions.runtime});\n          D.push({\"NODE_RUNTIMEVERSION\": this.targetOptions.runtimeVersion});\n          D.push({\"NODE_ARCH\": this.targetOptions.arch});\n          if (environment.isWin) {\n            libs = this.dist.winLibs;\n            if (libs.length) {\n              D.push({\"CMAKE_JS_LIB\": libs.join(\";\")});\n            }\n          }\n          $__5 = true;\n          $__6 = false;\n          $__7 = undefined;\n          try {\n            for ($__3 = void 0, $__2 = (_.keys(this.cMakeOptions))[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {\n              k = $__3.value;\n              {\n                D.push(($__1 = {}, Object.defineProperty($__1, k.toUpperCase(), {\n                  value: this.cMakeOptions[k],\n                  configurable: true,\n                  enumerable: true,\n                  writable: true\n                }), $__1));\n              }\n            }\n          } catch ($__8) {\n            $__6 = true;\n            $__7 = $__8;\n          } finally {\n            try {\n              if (!$__5 && $__2.return != null) {\n                $__2.return();\n              }\n            } finally {\n              if ($__6) {\n                throw $__7;\n              }\n            }\n          }\n          $ctx.state = 18;\n          break;\n        case 18:\n          $ctx.state = 6;\n          return this.toolset.initialize(false);\n        case 6:\n          $ctx.maybeThrow();\n          $ctx.state = 8;\n          break;\n        case 8:\n          if (this.toolset.generator) {\n            command += \" -G\\\"\" + this.toolset.generator + \"\\\"\";\n          }\n          if (this.toolset.cppCompilerPath) {\n            D.push({\"CMAKE_CXX_COMPILER\": this.toolset.cppCompilerPath});\n          }\n          if (this.toolset.cCompilerPath) {\n            D.push({\"CMAKE_C_COMPILER\": this.toolset.cCompilerPath});\n          }\n          if (this.toolset.compilerFlags.length) {\n            D.push({\"CMAKE_CXX_FLAGS\": this.toolset.compilerFlags.join(\" \")});\n          }\n          if (this.toolset.linkerFlags.length) {\n            D.push({\"CMAKE_SHARED_LINKER_FLAGS\": this.toolset.linkerFlags.join(\" \")});\n          }\n          if (this.toolset.makePath) {\n            D.push({\"CMAKE_MAKE_PROGRAM\": this.toolset.makePath});\n          }\n          $ctx.state = 20;\n          break;\n        case 20:\n          $ctx.state = 10;\n          return npmconf.loadAsync();\n        case 10:\n          npmConfig = $ctx.sent;\n          $ctx.state = 12;\n          break;\n        case 12:\n          npmConfigData = {};\n          if (npmConfig.sources.global && npmConfig.sources.global.data) {\n            _.extend(npmConfigData, npmConfig.sources.global.data);\n          }\n          if (npmConfig.sources.user && npmConfig.sources.user.data) {\n            _.extend(npmConfigData, npmConfig.sources.user.data);\n          }\n          $__12 = true;\n          $__13 = false;\n          $__14 = undefined;\n          try {\n            for ($__10 = void 0, $__9 = (_.keys(npmConfigData))[Symbol.iterator](); !($__12 = ($__10 = $__9.next()).done); $__12 = true) {\n              key = $__10.value;\n              {\n                ukey = key.toUpperCase();\n                if (_.startsWith(ukey, \"CMAKE_\")) {\n                  s = {};\n                  sk = ukey.substr(6);\n                  if (sk) {\n                    s[sk] = npmConfigData[key];\n                    if (s[sk]) {\n                      D.push(s);\n                    }\n                  }\n                }\n              }\n            }\n          } catch ($__15) {\n            $__13 = true;\n            $__14 = $__15;\n          } finally {\n            try {\n              if (!$__12 && $__9.return != null) {\n                $__9.return();\n              }\n            } finally {\n              if ($__13) {\n                throw $__14;\n              }\n            }\n          }\n          command += \" \" + D.map(function(p) {\n            return \"-D\" + _.keys(p)[0] + \"=\\\"\" + _.values(p)[0] + \"\\\"\";\n          }).join(\" \");\n          $ctx.state = 22;\n          break;\n        case 22:\n          $ctx.returnValue = command;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__17, this);\n}));\nCMake.prototype.configure = async($traceurRuntime.initGeneratorFunction(function $__18() {\n  var listPath,\n      command,\n      cwd,\n      e;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          this.verifyIfAvailable();\n          this.log.info(\"CMD\", \"CONFIGURE\");\n          listPath = path.join(this.projectRoot, \"CMakeLists.txt\");\n          $ctx.state = 44;\n          break;\n        case 44:\n          $ctx.state = 2;\n          return this.getConfigureCommand();\n        case 2:\n          command = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.pushTry(9, null);\n          $ctx.state = 12;\n          break;\n        case 12:\n          $ctx.state = 6;\n          return fs.lstatAsync(listPath);\n        case 6:\n          $ctx.maybeThrow();\n          $ctx.state = 8;\n          break;\n        case 8:\n          $ctx.popTry();\n          $ctx.state = 14;\n          break;\n        case 9:\n          $ctx.popTry();\n          $ctx.maybeUncatchable();\n          e = $ctx.storedException;\n          $ctx.state = 15;\n          break;\n        case 15:\n          throw new Error(\"'\" + listPath + \"' not found.\");\n          $ctx.state = 14;\n          break;\n        case 14:\n          $ctx.pushTry(22, null);\n          $ctx.state = 25;\n          break;\n        case 25:\n          $ctx.state = 19;\n          return fs.mkdirAsync(this.workDir);\n        case 19:\n          $ctx.maybeThrow();\n          $ctx.state = 21;\n          break;\n        case 21:\n          $ctx.popTry();\n          $ctx.state = 27;\n          break;\n        case 22:\n          $ctx.popTry();\n          $ctx.maybeUncatchable();\n          e = $ctx.storedException;\n          $ctx.state = 28;\n          break;\n        case 28:\n          _.noop(e);\n          $ctx.state = 27;\n          break;\n        case 27:\n          cwd = process.cwd();\n          process.chdir(this.workDir);\n          $ctx.state = 46;\n          break;\n        case 46:\n          $ctx.pushTry(null, 36);\n          $ctx.state = 38;\n          break;\n        case 38:\n          $ctx.state = 32;\n          return this._run(command);\n        case 32:\n          $ctx.maybeThrow();\n          $ctx.state = 36;\n          $ctx.finallyFallThrough = -2;\n          break;\n        case 36:\n          $ctx.popTry();\n          $ctx.state = 42;\n          break;\n        case 42:\n          process.chdir(cwd);\n          $ctx.state = 40;\n          break;\n        case 40:\n          $ctx.state = $ctx.finallyFallThrough;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__18, this);\n}));\nCMake.prototype.ensureConfigured = async($traceurRuntime.initGeneratorFunction(function $__19() {\n  var e;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          $ctx.pushTry(11, null);\n          $ctx.state = 14;\n          break;\n        case 14:\n          $ctx.state = 2;\n          return fs.lstatAsync(path.join(this.workDir, \"CMakeCache.txt\"));\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.popTry();\n          $ctx.state = -2;\n          break;\n        case 11:\n          $ctx.popTry();\n          $ctx.maybeUncatchable();\n          e = $ctx.storedException;\n          $ctx.state = 9;\n          break;\n        case 9:\n          _.noop(e);\n          $ctx.state = 10;\n          break;\n        case 10:\n          $ctx.state = 6;\n          return this.configure();\n        case 6:\n          $ctx.maybeThrow();\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__19, this);\n}));\nCMake.prototype.getBuildCommand = function() {\n  return Bluebird.resolve(this.path + \" --build \\\"\" + this.workDir + \"\\\" --config \" + this.config);\n};\nCMake.prototype.build = async($traceurRuntime.initGeneratorFunction(function $__20() {\n  var buildCommand;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          this.verifyIfAvailable();\n          $ctx.state = 14;\n          break;\n        case 14:\n          $ctx.state = 2;\n          return this.ensureConfigured();\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.state = 6;\n          return this.getBuildCommand();\n        case 6:\n          buildCommand = $ctx.sent;\n          $ctx.state = 8;\n          break;\n        case 8:\n          this.log.info(\"CMD\", \"BUILD\");\n          $ctx.state = 16;\n          break;\n        case 16:\n          $ctx.state = 10;\n          return this._run(buildCommand);\n        case 10:\n          $ctx.maybeThrow();\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__20, this);\n}));\nCMake.prototype.getCleanCommand = function() {\n  return this.path + \" -E remove_directory \\\"\" + this.workDir + \"\\\"\";\n};\nCMake.prototype.clean = function() {\n  this.verifyIfAvailable();\n  this.log.info(\"CMD\", \"CLEAN\");\n  return this._run(this.getCleanCommand());\n};\nCMake.prototype.reconfigure = async($traceurRuntime.initGeneratorFunction(function $__21() {\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          $ctx.state = 2;\n          return this.clean();\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.state = 6;\n          return this.configure();\n        case 6:\n          $ctx.maybeThrow();\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__21, this);\n}));\nCMake.prototype.rebuild = async($traceurRuntime.initGeneratorFunction(function $__22() {\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          $ctx.state = 2;\n          return this.clean();\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.state = 6;\n          return this.build();\n        case 6:\n          $ctx.maybeThrow();\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__22, this);\n}));\nCMake.prototype.compile = async($traceurRuntime.initGeneratorFunction(function $__23() {\n  var e;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          $ctx.pushTry(11, null);\n          $ctx.state = 14;\n          break;\n        case 14:\n          $ctx.state = 2;\n          return this.build();\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.popTry();\n          $ctx.state = -2;\n          break;\n        case 11:\n          $ctx.popTry();\n          $ctx.maybeUncatchable();\n          e = $ctx.storedException;\n          $ctx.state = 9;\n          break;\n        case 9:\n          _.noop(e);\n          this.log.info(\"REP\", \"Build has been failed, trying to do a full rebuild.\");\n          $ctx.state = 10;\n          break;\n        case 10:\n          $ctx.state = 6;\n          return this.rebuild();\n        case 6:\n          $ctx.maybeThrow();\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__23, this);\n}));\nCMake.prototype._run = function(command) {\n  this.log.info(\"RUN\", command);\n  return processHelpers.run(command, {silent: this.silent});\n};\nmodule.exports = CMake;\n\n//# sourceMappingURL=cMake.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/environment.js":"\"use strict\";\nvar os = require(\"os\");\nvar isIOJS = require(\"is-iojs\");\nvar which = require(\"which\");\nvar _ = require(\"lodash\");\nvar environment = module.exports = {\n  moduleVersion: require(\"../../package.json\").version,\n  platform: os.platform(),\n  isWin: os.platform() === \"win32\",\n  isLinux: os.platform() === \"linux\",\n  isOSX: os.platform() === \"darwin\",\n  arch: os.arch(),\n  isX86: os.arch() === \"ia32\",\n  isX64: os.arch() === \"x64\",\n  isArm: os.arch() === \"arm\",\n  runtime: isIOJS ? \"iojs\" : \"node\",\n  runtimeVersion: process.versions.node,\n  home: process.env[(os.platform() === \"win32\") ? \"USERPROFILE\" : \"HOME\"],\n  EOL: os.EOL\n};\nObject.defineProperties(environment, {\n  isPosix: {get: function() {\n      return !this.isWin;\n    }},\n  _isNinjaAvailable: {\n    value: null,\n    writable: true\n  },\n  isNinjaAvailable: {get: function() {\n      if (this._isNinjaAvailable === null) {\n        this._isNinjaAvailable = false;\n        try {\n          if (which.sync(\"ninja\")) {\n            this._isNinjaAvailable = true;\n          }\n        } catch (e) {\n          _.noop(e);\n        }\n      }\n      return this._isNinjaAvailable;\n    }},\n  _isMakeAvailable: {\n    value: null,\n    writable: true\n  },\n  isMakeAvailable: {get: function() {\n      if (this._isMakeAvailable === null) {\n        this._isMakeAvailable = false;\n        try {\n          if (which.sync(\"make\")) {\n            this._isMakeAvailable = true;\n          }\n        } catch (e) {\n          _.noop(e);\n        }\n      }\n      return this._isMakeAvailable;\n    }},\n  _isGPPAvailable: {\n    value: null,\n    writable: true\n  },\n  isGPPAvailable: {get: function() {\n      if (this._isGPPAvailable === null) {\n        this._isGPPAvailable = false;\n        try {\n          if (which.sync(\"g++\")) {\n            this._isGPPAvailable = true;\n          }\n        } catch (e) {\n          _.noop(e);\n        }\n      }\n      return this._isGPPAvailable;\n    }},\n  _isClangAvailable: {\n    value: null,\n    writable: true\n  },\n  isClangAvailable: {get: function() {\n      if (this._isClangAvailable === null) {\n        this._isClangAvailable = false;\n        try {\n          if (which.sync(\"clang++\")) {\n            this._isClangAvailable = true;\n          }\n        } catch (e) {\n          _.noop(e);\n        }\n      }\n      return this._isClangAvailable;\n    }}\n});\n\n//# sourceMappingURL=environment.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/dist.js":"\"use strict\";\nvar environment = require(\"./environment\");\nvar path = require(\"path\");\nvar urljoin = require(\"url-join\");\nvar Bluebird = require(\"bluebird\");\nvar fs = Bluebird.promisifyAll(require(\"fs-extra\"));\nvar _ = require(\"lodash\");\nvar CMLog = require(\"./cmLog\");\nvar TargetOptions = require(\"./targetOptions\");\nvar runtimePaths = require(\"./runtimePaths\");\nvar async = Bluebird.coroutine;\nvar Downloader = require(\"./downloader\");\nfunction testSum(sums, sum, fPath) {\n  var serverSum = _.first(sums.filter(function(s) {\n    return s.getPath === fPath;\n  }));\n  if (serverSum && serverSum.sum === sum) {\n    return;\n  }\n  throw new Error(\"SHA sum of file '\" + fPath + \"' mismatch!\");\n}\nfunction Dist(options) {\n  this.options = options || {};\n  this.log = new CMLog(this.options);\n  this.targetOptions = new TargetOptions(this.options);\n  this.downloader = new Downloader(this.options);\n}\nObject.defineProperties(Dist.prototype, {\n  internalPath: {get: function() {\n      return path.join(environment.home, \".cmake-js\", (this.targetOptions.runtime) + \"-\" + this.targetOptions.arch, \"v\" + this.targetOptions.runtimeVersion);\n    }},\n  externalPath: {get: function() {\n      return runtimePaths.get(this.targetOptions).externalPath;\n    }},\n  downloaded: {get: function() {\n      var headers = false;\n      var libs = true;\n      var stat = getStat(this.internalPath);\n      if (stat.isDirectory()) {\n        if (this.headerOnly) {\n          stat = getStat(path.join(this.internalPath, \"include/node/node.h\"));\n          headers = stat.isFile();\n        } else {\n          stat = getStat(path.join(this.internalPath, \"src/node.h\"));\n          if (stat.isFile()) {\n            stat = getStat(path.join(this.internalPath, \"deps/v8/include/v8.h\"));\n            headers = stat.isFile();\n          }\n        }\n        if (environment.isWin) {\n          var $__5 = true;\n          var $__6 = false;\n          var $__7 = undefined;\n          try {\n            for (var $__3 = void 0,\n                $__2 = (this.winLibs)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {\n              var libPath = $__3.value;\n              {\n                stat = getStat(libPath);\n                libs = libs && stat.isFile();\n              }\n            }\n          } catch ($__8) {\n            $__6 = true;\n            $__7 = $__8;\n          } finally {\n            try {\n              if (!$__5 && $__2.return != null) {\n                $__2.return();\n              }\n            } finally {\n              if ($__6) {\n                throw $__7;\n              }\n            }\n          }\n        }\n      }\n      return headers && libs;\n      function getStat(path) {\n        try {\n          return fs.statSync(path);\n        } catch (e) {\n          return {\n            isFile: _.constant(false),\n            isDirectory: _.constant(false)\n          };\n        }\n      }\n    }},\n  winLibs: {get: function() {\n      var libs = runtimePaths.get(this.targetOptions).winLibs;\n      var result = [];\n      var $__5 = true;\n      var $__6 = false;\n      var $__7 = undefined;\n      try {\n        for (var $__3 = void 0,\n            $__2 = (libs)[Symbol.iterator](); !($__5 = ($__3 = $__2.next()).done); $__5 = true) {\n          var lib = $__3.value;\n          {\n            result.push(path.join(this.internalPath, lib.dir, lib.name));\n          }\n        }\n      } catch ($__8) {\n        $__6 = true;\n        $__7 = $__8;\n      } finally {\n        try {\n          if (!$__5 && $__2.return != null) {\n            $__2.return();\n          }\n        } finally {\n          if ($__6) {\n            throw $__7;\n          }\n        }\n      }\n      return result;\n    }},\n  headerOnly: {get: function() {\n      return runtimePaths.get(this.targetOptions).headerOnly;\n    }}\n});\nDist.prototype.ensureDownloaded = async($traceurRuntime.initGeneratorFunction(function $__9() {\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          $ctx.state = (!this.downloaded) ? 1 : -2;\n          break;\n        case 1:\n          $ctx.state = 2;\n          return this.download();\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__9, this);\n}));\nDist.prototype.download = async($traceurRuntime.initGeneratorFunction(function $__10() {\n  var log,\n      sums;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          log = this.log;\n          log.info(\"DIST\", \"Downloading distribution files.\");\n          $ctx.state = 14;\n          break;\n        case 14:\n          $ctx.state = 2;\n          return fs.mkdirpAsync(this.internalPath);\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.state = 6;\n          return this._downloadShaSums();\n        case 6:\n          sums = $ctx.sent;\n          $ctx.state = 8;\n          break;\n        case 8:\n          $ctx.state = 10;\n          return Bluebird.all([this._downloadLibs(sums), this._downloadTar(sums)]);\n        case 10:\n          $ctx.maybeThrow();\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__10, this);\n}));\nDist.prototype._downloadShaSums = async($traceurRuntime.initGeneratorFunction(function $__11() {\n  var sumUrl,\n      log,\n      $__12,\n      $__13,\n      $__14,\n      $__15,\n      $__16,\n      $__17,\n      $__18,\n      $__19,\n      $__20,\n      $__21,\n      $__22,\n      $__23;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          $ctx.state = (this.targetOptions.runtime === \"node\" || this.targetOptions.runtime === \"iojs\") ? 11 : 13;\n          break;\n        case 11:\n          sumUrl = urljoin(this.externalPath, \"SHASUMS256.txt\");\n          log = this.log;\n          log.http(\"DIST\", \"\\t- \" + sumUrl);\n          $ctx.state = 12;\n          break;\n        case 12:\n          $__12 = this.downloader;\n          $__13 = $__12.downloadString;\n          $__14 = $__13.call($__12, sumUrl);\n          $ctx.state = 6;\n          break;\n        case 6:\n          $ctx.state = 2;\n          return $__14;\n        case 2:\n          $__15 = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          $__16 = $__15.split;\n          $__17 = $__16.call($__15, \"\\n\");\n          $__18 = $__17.map;\n          $__19 = function(line) {\n            var parts = line.split(/\\s+/);\n            return {\n              getPath: parts[1],\n              sum: parts[0]\n            };\n          };\n          $__20 = $__18.call($__17, $__19);\n          $__21 = $__20.filter;\n          $__22 = function(i) {\n            return i.getPath && i.sum;\n          };\n          $__23 = $__21.call($__20, $__22);\n          $ctx.state = 8;\n          break;\n        case 8:\n          $ctx.returnValue = $__23;\n          $ctx.state = -2;\n          break;\n        case 13:\n          $ctx.returnValue = null;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__11, this);\n}));\nDist.prototype._downloadTar = async($traceurRuntime.initGeneratorFunction(function $__24(sums) {\n  var log,\n      self,\n      tarLocalPath,\n      tarUrl,\n      sum;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          log = this.log;\n          self = this;\n          tarLocalPath = runtimePaths.get(self.targetOptions).tarPath;\n          tarUrl = urljoin(self.externalPath, tarLocalPath);\n          log.http(\"DIST\", \"\\t- \" + tarUrl);\n          $ctx.state = 6;\n          break;\n        case 6:\n          $ctx.state = 2;\n          return this.downloader.downloadTgz(tarUrl, {\n            hash: sums ? \"sha256\" : null,\n            path: self.internalPath,\n            strip: 1,\n            filter: function() {\n              if (this.path === self.internalPath) {\n                return true;\n              }\n              var ext = path.extname(this.path);\n              return ext && ext.toLowerCase() === \".h\";\n            }\n          });\n        case 2:\n          sum = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          if (sums) {\n            testSum(sums, sum, tarLocalPath);\n          }\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__24, this);\n}));\nDist.prototype._downloadLibs = async($traceurRuntime.initGeneratorFunction(function $__25(sums) {\n  var log,\n      self,\n      paths,\n      $__5,\n      $__6,\n      $__7,\n      $__3,\n      $__2,\n      dirs,\n      subDir,\n      fn,\n      fPath,\n      libUrl,\n      sum,\n      $__8;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          log = this.log;\n          self = this;\n          $ctx.state = 35;\n          break;\n        case 35:\n          $ctx.state = (!environment.isWin) ? 1 : 2;\n          break;\n        case 1:\n          $ctx.state = -2;\n          break;\n        case 2:\n          paths = runtimePaths.get(self.targetOptions);\n          $__5 = true;\n          $__6 = false;\n          $__7 = undefined;\n          $ctx.state = 37;\n          break;\n        case 37:\n          $ctx.pushTry(21, 22);\n          $ctx.state = 24;\n          break;\n        case 24:\n          $__3 = void 0, $__2 = (paths.winLibs)[Symbol.iterator]();\n          $ctx.state = 20;\n          break;\n        case 20:\n          $ctx.state = (!($__5 = ($__3 = $__2.next()).done)) ? 16 : 18;\n          break;\n        case 15:\n          $__5 = true;\n          $ctx.state = 20;\n          break;\n        case 16:\n          dirs = $__3.value;\n          $ctx.state = 17;\n          break;\n        case 17:\n          subDir = dirs.dir;\n          fn = dirs.name;\n          fPath = subDir ? urljoin(subDir, fn) : fn;\n          libUrl = urljoin(self.externalPath, fPath);\n          log.http(\"DIST\", \"\\t- \" + libUrl);\n          $ctx.state = 13;\n          break;\n        case 13:\n          $ctx.state = 5;\n          return fs.mkdirpAsync(path.join(self.internalPath, subDir));\n        case 5:\n          $ctx.maybeThrow();\n          $ctx.state = 7;\n          break;\n        case 7:\n          $ctx.state = 9;\n          return this.downloader.downloadFile(libUrl, {\n            path: path.join(self.internalPath, fPath),\n            hash: sums ? \"sha256\" : null\n          });\n        case 9:\n          sum = $ctx.sent;\n          $ctx.state = 11;\n          break;\n        case 11:\n          if (sums) {\n            testSum(sums, sum, fPath);\n          }\n          $ctx.state = 15;\n          break;\n        case 18:\n          $ctx.popTry();\n          $ctx.state = 22;\n          $ctx.finallyFallThrough = -2;\n          break;\n        case 21:\n          $ctx.popTry();\n          $ctx.maybeUncatchable();\n          $__8 = $ctx.storedException;\n          $ctx.state = 27;\n          break;\n        case 27:\n          $__6 = true;\n          $__7 = $__8;\n          $ctx.state = 22;\n          $ctx.finallyFallThrough = -2;\n          break;\n        case 22:\n          $ctx.popTry();\n          $ctx.state = 33;\n          break;\n        case 33:\n          try {\n            if (!$__5 && $__2.return != null) {\n              $__2.return();\n            }\n          } finally {\n            if ($__6) {\n              throw $__7;\n            }\n          }\n          $ctx.state = 31;\n          break;\n        case 31:\n          $ctx.state = $ctx.finallyFallThrough;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__25, this);\n}));\nmodule.exports = Dist;\n\n//# sourceMappingURL=dist.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/cmLog.js":"\"use strict\";\nvar log = require(\"npmlog\");\nfunction CMLog(options) {\n  this.options = options || {};\n  this.debug = require(\"debug\")(this.options.logName || \"cmake-js\");\n}\nObject.defineProperties(CMLog.prototype, {level: {get: function() {\n      if (this.options.noLog) {\n        return \"silly\";\n      } else {\n        return log.level;\n      }\n    }}});\nCMLog.prototype.silly = function(cat, msg) {\n  if (this.options.noLog) {\n    this.debug(cat + \": \" + msg);\n  } else {\n    log.silly(cat, msg);\n  }\n};\nCMLog.prototype.verbose = function(cat, msg) {\n  if (this.options.noLog) {\n    this.debug(cat + \": \" + msg);\n  } else {\n    log.verbose(cat, msg);\n  }\n};\nCMLog.prototype.info = function(cat, msg) {\n  if (this.options.noLog) {\n    this.debug(cat + \": \" + msg);\n  } else {\n    log.info(cat, msg);\n  }\n};\nCMLog.prototype.warn = function(cat, msg) {\n  if (this.options.noLog) {\n    this.debug(cat + \": \" + msg);\n  } else {\n    log.warn(cat, msg);\n  }\n};\nCMLog.prototype.http = function(cat, msg) {\n  if (this.options.noLog) {\n    this.debug(cat + \": \" + msg);\n  } else {\n    log.http(cat, msg);\n  }\n};\nCMLog.prototype.error = function(cat, msg) {\n  if (this.options.noLog) {\n    this.debug(cat + \": \" + msg);\n  } else {\n    log.error(cat, msg);\n  }\n};\nmodule.exports = CMLog;\n\n//# sourceMappingURL=cmLog.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/targetOptions.js":"\"use strict\";\nvar environment = require(\"./environment\");\nvar _ = require(\"lodash\");\nfunction TargetOptions(options) {\n  this.options = options || {};\n}\nObject.defineProperties(TargetOptions.prototype, {\n  arch: {get: function() {\n      return this.options.arch || environment.arch;\n    }},\n  isX86: {get: function() {\n      return this.arch === \"ia32\";\n    }},\n  isX64: {get: function() {\n      return this.arch === \"x64\";\n    }},\n  isArm: {get: function() {\n      return this.arch === \"arm\";\n    }},\n  runtime: {get: function() {\n      return this.options.runtime || environment.runtime;\n    }},\n  runtimeVersion: {get: function() {\n      return this.options.runtimeVersion || environment.runtimeVersion;\n    }}\n});\nmodule.exports = TargetOptions;\n\n//# sourceMappingURL=targetOptions.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/runtimePaths.js":"\"use strict\";\nvar _ = require(\"lodash\");\nvar assert = require(\"assert\");\nvar semver = require(\"semver\");\nvar runtimePaths = {\n  node: function(targetOptions) {\n    if (semver.lt(targetOptions.runtimeVersion, \"4.0.0\")) {\n      return {\n        externalPath: \"http://nodejs.org/dist/v\" + targetOptions.runtimeVersion + \"/\",\n        winLibs: [{\n          dir: targetOptions.isX64 ? \"x64\" : \"\",\n          name: targetOptions.runtime + \".lib\"\n        }],\n        tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n        headerOnly: false\n      };\n    } else {\n      return {\n        externalPath: \"http://nodejs.org/dist/v\" + targetOptions.runtimeVersion + \"/\",\n        winLibs: [{\n          dir: targetOptions.isX64 ? \"win-x64\" : \"win-x86\",\n          name: targetOptions.runtime + \".lib\"\n        }],\n        tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \"-headers.tar.gz\",\n        headerOnly: true\n      };\n    }\n  },\n  iojs: function(targetOptions) {\n    return {\n      externalPath: \"https://iojs.org/dist/v\" + targetOptions.runtimeVersion + \"/\",\n      winLibs: [{\n        dir: targetOptions.isX64 ? \"win-x64\" : \"win-x86\",\n        name: targetOptions.runtime + \".lib\"\n      }],\n      tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n      headerOnly: false\n    };\n  },\n  nw: function(targetOptions) {\n    if (semver.gte(targetOptions.runtimeVersion, \"0.13.0\")) {\n      return {\n        externalPath: \"http://node-webkit.s3.amazonaws.com/v\" + targetOptions.runtimeVersion + \"/\",\n        winLibs: [{\n          dir: targetOptions.isX64 ? \"x64\" : \"\",\n          name: targetOptions.runtime + \".lib\"\n        }, {\n          dir: targetOptions.isX64 ? \"x64\" : \"\",\n          name: \"node.lib\"\n        }],\n        tarPath: \"nw-headers-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n        headerOnly: false\n      };\n    }\n    return {\n      externalPath: \"http://node-webkit.s3.amazonaws.com/v\" + targetOptions.runtimeVersion + \"/\",\n      winLibs: [{\n        dir: targetOptions.isX64 ? \"x64\" : \"\",\n        name: targetOptions.runtime + \".lib\"\n      }],\n      tarPath: \"nw-headers-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n      headerOnly: false\n    };\n  },\n  electron: function(targetOptions) {\n    return {\n      externalPath: \"http://atom.io/download/atom-shell/v\" + targetOptions.runtimeVersion + \"/\",\n      winLibs: [{\n        dir: targetOptions.isX64 ? \"x64\" : \"\",\n        name: \"node.lib\"\n      }],\n      tarPath: \"node\" + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n      headerOnly: false\n    };\n  },\n  get: function(targetOptions) {\n    assert(_.isObject(targetOptions));\n    var runtime = targetOptions.runtime;\n    var func = runtimePaths[runtime];\n    var paths;\n    if (_.isFunction(func) && _.isPlainObject(paths = func(targetOptions))) {\n      return paths;\n    }\n    throw new Error(\"Unknown runtime: \" + runtime);\n  }\n};\nmodule.exports = runtimePaths;\n\n//# sourceMappingURL=runtimePaths.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/downloader.js":"\"use strict\";\nvar Bluebird = require(\"bluebird\");\nvar crypto = require(\"crypto\");\nvar request = require(\"request\");\nvar async = Bluebird.coroutine;\nvar MemoryStream = require(\"memory-stream\");\nvar zlib = require(\"zlib\");\nvar tar = require(\"tar\");\nvar fs = Bluebird.promisifyAll(require(\"fs-extra\"));\nvar _ = require(\"lodash\");\nvar unzip = require(\"unzip\");\nvar CMLog = require(\"./cmLog\");\nfunction Downloader(options) {\n  this.options = options || {};\n  this.log = new CMLog(this.options);\n}\nDownloader.prototype.downloadToStream = function(url, stream, hash) {\n  var self = this;\n  var shasum = hash ? crypto.createHash(hash) : null;\n  return new Bluebird(function(resolve, reject) {\n    var length = 0;\n    var done = 0;\n    var lastPercent = 0;\n    request.get(url).on(\"error\", function(err) {\n      reject(err);\n    }).on(\"response\", function(data) {\n      length = parseInt(data.headers[\"content-length\"]);\n      if (!_.isNumber(length)) {\n        length = 0;\n      }\n    }).on(\"data\", function(chunk) {\n      if (shasum) {\n        shasum.update(chunk);\n      }\n      if (length) {\n        done += chunk.length;\n        var percent = done / length * 100;\n        percent = Math.round(percent / 10) * 10 + 10;\n        if (percent > lastPercent) {\n          self.log.verbose(\"DWNL\", \"\\t\" + lastPercent + \"%\");\n          lastPercent = percent;\n        }\n      }\n    }).pipe(stream);\n    stream.once(\"error\", function(err) {\n      reject(err);\n    });\n    stream.once(\"finish\", function() {\n      resolve(shasum ? shasum.digest(\"hex\") : undefined);\n    });\n  });\n};\nDownloader.prototype.downloadString = async($traceurRuntime.initGeneratorFunction(function $__1(url) {\n  var result;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          result = new MemoryStream();\n          $ctx.state = 8;\n          break;\n        case 8:\n          $ctx.state = 2;\n          return this.downloadToStream(url, result);\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.returnValue = result.toString();\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__1, this);\n}));\nDownloader.prototype.downloadFile = async($traceurRuntime.initGeneratorFunction(function $__2(url, options) {\n  var result,\n      sum;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          if (_.isString(options)) {\n            options.path = options;\n          }\n          result = fs.createWriteStream(options.path);\n          $ctx.state = 8;\n          break;\n        case 8:\n          $ctx.state = 2;\n          return this.downloadToStream(url, result, options.hash);\n        case 2:\n          sum = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          this.testSum(url, sum, options);\n          $ctx.state = 10;\n          break;\n        case 10:\n          $ctx.returnValue = sum;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__2, this);\n}));\nDownloader.prototype.downloadTgz = async($traceurRuntime.initGeneratorFunction(function $__3(url, options) {\n  var gunzip,\n      extractor,\n      sum;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          if (_.isString(options)) {\n            options.path = options;\n          }\n          gunzip = zlib.createGunzip();\n          extractor = new tar.Extract(options);\n          gunzip.pipe(extractor);\n          $ctx.state = 8;\n          break;\n        case 8:\n          $ctx.state = 2;\n          return this.downloadToStream(url, gunzip, options.hash);\n        case 2:\n          sum = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          this.testSum(url, sum, options);\n          $ctx.state = 10;\n          break;\n        case 10:\n          $ctx.returnValue = sum;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__3, this);\n}));\nDownloader.prototype.downloadZip = async($traceurRuntime.initGeneratorFunction(function $__4(url, options) {\n  var extractor,\n      sum;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          if (_.isString(options)) {\n            options.path = options;\n          }\n          extractor = new unzip.Extract(options);\n          $ctx.state = 8;\n          break;\n        case 8:\n          $ctx.state = 2;\n          return this.downloadToStream(url, extractor, options.hash);\n        case 2:\n          sum = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          this.testSum(url, sum, options);\n          $ctx.state = 10;\n          break;\n        case 10:\n          $ctx.returnValue = sum;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__4, this);\n}));\nDownloader.prototype.testSum = function(url, sum, options) {\n  if (options.hash && sum && options.sum && options.sum !== sum) {\n    throw new Error(options.hash.toUpperCase() + \" sum of download '\" + url + \"' mismatch!\");\n  }\n};\nmodule.exports = Downloader;\n\n//# sourceMappingURL=downloader.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/locateNAN.js":"\"use strict\";\nvar Bluebird = require(\"bluebird\");\nvar fs = Bluebird.promisifyAll(require(\"fs-extra\"));\nvar path = require(\"path\");\nvar async = Bluebird.coroutine;\nvar _ = require(\"lodash\");\nvar isNANModule = async($traceurRuntime.initGeneratorFunction(function $__0(dir) {\n  var h,\n      stat,\n      e;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          h = path.join(dir, \"nan.h\");\n          $ctx.state = 19;\n          break;\n        case 19:\n          $ctx.pushTry(11, null);\n          $ctx.state = 14;\n          break;\n        case 14:\n          $ctx.state = 2;\n          return fs.statAsync(h);\n        case 2:\n          stat = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.returnValue = stat.isFile();\n          $ctx.state = -2;\n          break;\n        case 6:\n          $ctx.popTry();\n          $ctx.state = -2;\n          break;\n        case 11:\n          $ctx.popTry();\n          $ctx.maybeUncatchable();\n          e = $ctx.storedException;\n          $ctx.state = 9;\n          break;\n        case 9:\n          _.noop(e);\n          $ctx.state = 10;\n          break;\n        case 10:\n          $ctx.returnValue = false;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__0, this);\n}));\nvar isNodeJSProject = async($traceurRuntime.initGeneratorFunction(function $__1(dir) {\n  var pjson,\n      node_modules,\n      stat,\n      $__2,\n      $__3,\n      $__4,\n      e;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          pjson = path.join(dir, \"package.json\");\n          node_modules = path.join(dir, \"node_modules\");\n          $ctx.state = 31;\n          break;\n        case 31:\n          $ctx.pushTry(19, null);\n          $ctx.state = 22;\n          break;\n        case 22:\n          $ctx.state = 2;\n          return fs.statAsync(pjson);\n        case 2:\n          stat = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.state = (stat.isFile()) ? 5 : 6;\n          break;\n        case 5:\n          $ctx.returnValue = true;\n          $ctx.state = -2;\n          break;\n        case 6:\n          $__2 = fs.statAsync;\n          $__3 = $__2.call(fs, node_modules);\n          $ctx.state = 13;\n          break;\n        case 13:\n          $ctx.state = 9;\n          return $__3;\n        case 9:\n          $__4 = $ctx.sent;\n          $ctx.state = 11;\n          break;\n        case 11:\n          stat = $__4;\n          $ctx.state = 15;\n          break;\n        case 15:\n          $ctx.state = (stat.isDirectory()) ? 16 : 17;\n          break;\n        case 16:\n          $ctx.returnValue = true;\n          $ctx.state = -2;\n          break;\n        case 17:\n          $ctx.popTry();\n          $ctx.state = 24;\n          break;\n        case 19:\n          $ctx.popTry();\n          $ctx.maybeUncatchable();\n          e = $ctx.storedException;\n          $ctx.state = 25;\n          break;\n        case 25:\n          _.noop(e);\n          $ctx.state = 24;\n          break;\n        case 24:\n          $ctx.returnValue = false;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__1, this);\n}));\nvar locateNAN = module.exports = async($traceurRuntime.initGeneratorFunction(function $__5(projectRoot) {\n  var result,\n      nanModulePath,\n      $__6,\n      $__7,\n      $__8,\n      $__9;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          if (locateNAN.__projectRoot) {\n            projectRoot = locateNAN.__projectRoot;\n          }\n          $ctx.state = 28;\n          break;\n        case 28:\n          $ctx.state = 2;\n          return isNodeJSProject(projectRoot);\n        case 2:\n          result = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.state = (!result) ? 5 : 6;\n          break;\n        case 5:\n          $ctx.returnValue = null;\n          $ctx.state = -2;\n          break;\n        case 6:\n          nanModulePath = path.join(projectRoot, \"node_modules\", \"nan\");\n          $ctx.state = 30;\n          break;\n        case 30:\n          $__6 = isNANModule(nanModulePath);\n          $ctx.state = 13;\n          break;\n        case 13:\n          $ctx.state = 9;\n          return $__6;\n        case 9:\n          $__7 = $ctx.sent;\n          $ctx.state = 11;\n          break;\n        case 11:\n          result = $__7;\n          $ctx.state = 15;\n          break;\n        case 15:\n          $ctx.state = (result) ? 16 : 17;\n          break;\n        case 16:\n          $ctx.returnValue = nanModulePath;\n          $ctx.state = -2;\n          break;\n        case 17:\n          projectRoot = path.normalize(path.join(projectRoot, \"..\", \"..\"));\n          $ctx.state = 32;\n          break;\n        case 32:\n          $__8 = locateNAN(projectRoot);\n          $ctx.state = 24;\n          break;\n        case 24:\n          $ctx.state = 20;\n          return $__8;\n        case 20:\n          $__9 = $ctx.sent;\n          $ctx.state = 22;\n          break;\n        case 22:\n          $ctx.returnValue = $__9;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__5, this);\n}));\n\n//# sourceMappingURL=locateNAN.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/processHelpers.js":"\"use strict\";\nvar Bluebird = require(\"bluebird\");\nvar splitargs = require(\"splitargs\");\nvar _ = require(\"lodash\");\nvar spawn = require(\"child_process\").spawn;\nvar exec = require(\"child_process\").exec;\nvar processHelpers = {\n  run: function(command, options) {\n    options = _.defaults(options, {silent: false});\n    return new Bluebird(function(resolve, reject) {\n      var args = splitargs(command);\n      var name = args[0];\n      args.splice(0, 1);\n      var child = spawn(name, args, {stdio: options.silent ? \"ignore\" : \"inherit\"});\n      var ended = false;\n      child.on(\"error\", function(e) {\n        if (!ended) {\n          reject(e);\n          ended = true;\n        }\n      });\n      child.on(\"exit\", function(code, signal) {\n        if (!ended) {\n          if (code === 0) {\n            resolve();\n          } else {\n            reject(new Error(\"Process terminated: \" + code || signal));\n          }\n          ended = true;\n        }\n      });\n    });\n  },\n  exec: function(command) {\n    return new Bluebird(function(resolve, reject) {\n      exec(command, function(err, stdout, stderr) {\n        if (err) {\n          reject(new Error(err.message + \"\\n\" + (stdout || stderr)));\n        } else {\n          resolve(stdout);\n        }\n      });\n    });\n  }\n};\nmodule.exports = processHelpers;\n\n//# sourceMappingURL=processHelpers.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/toolset.js":"\"use strict\";\nvar Bluebird = require(\"bluebird\");\nvar async = Bluebird.coroutine;\nvar _ = require(\"lodash\");\nvar TargetOptions = require(\"./targetOptions\");\nvar environment = require(\"./environment\");\nvar assert = require(\"assert\");\nvar vsDetect = require(\"./vsDetect\");\nvar path = require(\"path\");\nvar CMLog = require(\"./cmLog\");\nfunction Toolset(options) {\n  this.options = options || {};\n  this.targetOptions = new TargetOptions(this.options);\n  this.generator = options.generator;\n  this.cCompilerPath = null;\n  this.cppCompilerPath = null;\n  this.compilerFlags = [];\n  this.linkerFlags = [];\n  this.makePath = null;\n  this.log = new CMLog(this.options);\n  this._initialized = false;\n}\nToolset.prototype.initialize = async($traceurRuntime.initGeneratorFunction(function $__8(install) {\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          $ctx.state = (!this._initialized) ? 7 : -2;\n          break;\n        case 7:\n          $ctx.state = (environment.isWin) ? 1 : 5;\n          break;\n        case 1:\n          $ctx.state = 2;\n          return this.initializeWin(install);\n        case 2:\n          $ctx.maybeThrow();\n          $ctx.state = 4;\n          break;\n        case 5:\n          this.initializePosix(install);\n          $ctx.state = 4;\n          break;\n        case 4:\n          this._initialized = true;\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__8, this);\n}));\nToolset.prototype.initializePosix = function(install) {\n  if (!environment.isGPPAvailable && !environment.isClangAvailable) {\n    if (environment.isOSX) {\n      throw new Error(\"C++ Compiler toolset is not available. Install Xcode Commandline Tools from Apple Dev Center, or install Clang with homebrew by invoking: 'brew install llvm --with-clang --with-asan'.\");\n    } else {\n      throw new Error(\"C++ Compiler toolset is not available. Install proper compiler toolset with your package manager, eg. 'sudo apt-get install g++'.\");\n    }\n  }\n  if (this.options.preferClang && environment.isClangAvailable) {\n    if (install) {\n      this.log.info(\"TOOL\", \"Using clang++ compiler, because preferClang option is set, and clang++ is available.\");\n    }\n    this.cppCompilerPath = \"clang++\";\n    this.cCompilerPath = \"clang\";\n  } else if (this.options.preferGnu && environment.isGPPAvailable) {\n    if (install) {\n      this.log.info(\"TOOL\", \"Using g++ compiler, because preferGnu option is set, and g++ is available.\");\n    }\n    this.cppCompilerPath = \"g++\";\n    this.cCompilerPath = \"gcc\";\n  }\n  if (this.generator) {\n    if (install) {\n      this.log.info(\"TOOL\", \"Using \" + this.options.generator + \" generator, as specified from commandline.\");\n    }\n  } else if (environment.isOSX) {\n    if (this.options.preferXcode) {\n      if (install) {\n        this.log.info(\"TOOL\", \"Using Xcode generator, because preferXcode option is set.\");\n      }\n      this.generator = \"Xcode\";\n    } else if (this.options.preferMake && environment.isMakeAvailable) {\n      if (install) {\n        this.log.info(\"TOOL\", \"Using Unix Makefiles generator, because preferMake option is set, and make is available.\");\n      }\n      this.generator = \"Unix Makefiles\";\n    } else if (environment.isNinjaAvailable) {\n      if (install) {\n        this.log.info(\"TOOL\", \"Using Ninja generator, because ninja is available.\");\n      }\n      this.generator = \"Ninja\";\n    } else {\n      if (install) {\n        this.log.info(\"TOOL\", \"Using Unix Makefiles generator.\");\n      }\n      this.generator = \"Unix Makefiles\";\n    }\n  } else {\n    if (this.options.preferMake && environment.isMakeAvailable) {\n      if (install) {\n        this.log.info(\"TOOL\", \"Using Unix Makefiles generator, because preferMake option is set, and make is available.\");\n      }\n      this.generator = \"Unix Makefiles\";\n    } else if (environment.isNinjaAvailable) {\n      if (install) {\n        this.log.info(\"TOOL\", \"Using Ninja generator, because ninja is available.\");\n      }\n      this.generator = \"Ninja\";\n    } else {\n      if (install) {\n        this.log.info(\"TOOL\", \"Using Unix Makefiles generator.\");\n      }\n      this.generator = \"Unix Makefiles\";\n    }\n  }\n  this._setupGNUStd(install);\n  if (environment.isOSX) {\n    if (install) {\n      this.log.verbose(\"TOOL\", \"Setting default OSX compiler flags.\");\n    }\n    this.compilerFlags.push(\"-D_DARWIN_USE_64_BIT_INODE=1\");\n    this.compilerFlags.push(\"-D_LARGEFILE_SOURCE\");\n    this.compilerFlags.push(\"-D_FILE_OFFSET_BITS=64\");\n    this.compilerFlags.push(\"-DBUILDING_NODE_EXTENSION\");\n    this.compilerFlags.push(\"-w\");\n    this.linkerFlags.push(\"-undefined dynamic_lookup\");\n  }\n};\nToolset.prototype._setupGNUStd = function(install) {\n  if (this.options.std) {\n    if (this.options.std !== \"c++98\") {\n      if (install) {\n        this.log.info(\"TOOL\", (\"Using \" + this.options.std + \" compiler standard.\"));\n      }\n      this.compilerFlags.push(\"-std=\" + this.options.std);\n    }\n  } else {\n    if (install) {\n      this.log.info(\"TOOL\", \"Using c++11 compiler standard.\");\n    }\n    this.compilerFlags.push(\"-std=c++11\");\n  }\n};\nToolset.prototype.initializeWin = async($traceurRuntime.initGeneratorFunction(function $__9(install) {\n  var topVS;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          $ctx.state = (this.generator) ? 3 : 2;\n          break;\n        case 3:\n          if (install) {\n            this.log.info(\"TOOL\", \"Using \" + this.options.generator + \" generator, as specified from commandline.\");\n          }\n          if (this.targetOptions.isX86) {\n            if (install) {\n              this.log.verbose(\"TOOL\", \"Setting SAFESEH:NO linker flag.\");\n            }\n            this.linkerFlags.push(\"/SAFESEH:NO\");\n          }\n          $ctx.state = 4;\n          break;\n        case 4:\n          $ctx.state = -2;\n          break;\n        case 2:\n          $ctx.state = 7;\n          return this._getTopSupportedVisualStudioGenerator();\n        case 7:\n          topVS = $ctx.sent;\n          $ctx.state = 9;\n          break;\n        case 9:\n          if (topVS) {\n            if (install) {\n              this.log.info(\"TOOL\", (\"Using \" + topVS + \" generator.\"));\n            }\n            this.generator = topVS;\n            if (this.targetOptions.isX86) {\n              if (install) {\n                this.log.verbose(\"TOOL\", \"Setting SAFESEH:NO linker flag.\");\n              }\n              this.linkerFlags.push(\"/SAFESEH:NO\");\n            }\n          } else {\n            throw new Error(\"There is no Visual C++ compiler installed. Install Visual C++ Build Toolset or Visual Studio.\");\n          }\n          $ctx.state = -2;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__9, this);\n}));\nToolset.prototype._getTopSupportedVisualStudioGenerator = async($traceurRuntime.initGeneratorFunction(function $__10() {\n  var CMake,\n      list,\n      maxVer,\n      result,\n      $__4,\n      $__5,\n      $__6,\n      $__2,\n      $__1,\n      gen,\n      found,\n      ver,\n      $__11,\n      $__12,\n      $__13,\n      $__7;\n  return $traceurRuntime.createGeneratorInstance(function($ctx) {\n    while (true)\n      switch ($ctx.state) {\n        case 0:\n          CMake = require(\"./cMake\");\n          assert(environment.isWin);\n          $ctx.state = 41;\n          break;\n        case 41:\n          $ctx.state = 2;\n          return CMake.getGenerators(this.options);\n        case 2:\n          list = $ctx.sent;\n          $ctx.state = 4;\n          break;\n        case 4:\n          maxVer = 0;\n          result = null;\n          $__4 = true;\n          $__5 = false;\n          $__6 = undefined;\n          $ctx.state = 43;\n          break;\n        case 43:\n          $ctx.pushTry(25, 26);\n          $ctx.state = 28;\n          break;\n        case 28:\n          $__2 = void 0, $__1 = (list)[Symbol.iterator]();\n          $ctx.state = 24;\n          break;\n        case 24:\n          $ctx.state = (!($__4 = ($__2 = $__1.next()).done)) ? 20 : 22;\n          break;\n        case 12:\n          $__4 = true;\n          $ctx.state = 24;\n          break;\n        case 20:\n          gen = $__2.value;\n          $ctx.state = 21;\n          break;\n        case 21:\n          found = /^visual studio (\\d+)/i.exec(gen);\n          $ctx.state = 19;\n          break;\n        case 19:\n          $ctx.state = (found) ? 15 : 12;\n          break;\n        case 15:\n          ver = parseInt(found[1]);\n          $ctx.state = 16;\n          break;\n        case 16:\n          $ctx.state = (ver > maxVer) ? 9 : 12;\n          break;\n        case 9:\n          $__11 = vsDetect.isInstalled;\n          $__12 = $__11.call(vsDetect, ver + \".0\");\n          $ctx.state = 10;\n          break;\n        case 10:\n          $ctx.state = 6;\n          return $__12;\n        case 6:\n          $__13 = $ctx.sent;\n          $ctx.state = 8;\n          break;\n        case 8:\n          $ctx.state = ($__13) ? 11 : 12;\n          break;\n        case 11:\n          result = this.targetOptions.isX64 ? (gen + \" Win64\") : gen;\n          maxVer = ver;\n          $ctx.state = 12;\n          break;\n        case 22:\n          $ctx.popTry();\n          $ctx.state = 26;\n          $ctx.finallyFallThrough = 30;\n          break;\n        case 25:\n          $ctx.popTry();\n          $ctx.maybeUncatchable();\n          $__7 = $ctx.storedException;\n          $ctx.state = 31;\n          break;\n        case 31:\n          $__5 = true;\n          $__6 = $__7;\n          $ctx.state = 26;\n          $ctx.finallyFallThrough = 30;\n          break;\n        case 26:\n          $ctx.popTry();\n          $ctx.state = 37;\n          break;\n        case 37:\n          try {\n            if (!$__4 && $__1.return != null) {\n              $__1.return();\n            }\n          } finally {\n            if ($__5) {\n              throw $__6;\n            }\n          }\n          $ctx.state = 35;\n          break;\n        case 30:\n          $ctx.returnValue = result;\n          $ctx.state = -2;\n          break;\n        case 35:\n          $ctx.state = $ctx.finallyFallThrough;\n          break;\n        default:\n          return $ctx.end();\n      }\n  }, $__10, this);\n}));\nmodule.exports = Toolset;\n\n//# sourceMappingURL=toolset.js.map\n","/home/travis/build/npmtest/node-npmtest-cmake-js/node_modules/cmake-js/lib/es5/vsDetect.js":"\"use strict\";\nvar processHelpers = require(\"./processHelpers\");\nvar Bluebird = require(\"bluebird\");\nvar async = Bluebird.coroutine;\nvar _ = require(\"lodash\");\nvar vsDetect = {\n  isInstalled: async($traceurRuntime.initGeneratorFunction(function $__1(version) {\n    var $__2,\n        $__3,\n        $__4,\n        $__5,\n        $__6,\n        $__7,\n        $__8;\n    return $traceurRuntime.createGeneratorInstance(function($ctx) {\n      while (true)\n        switch ($ctx.state) {\n          case 0:\n            $__2 = this._isVSInstalled;\n            $__3 = $__2.call(this, version);\n            $ctx.state = 17;\n            break;\n          case 17:\n            $ctx.state = 2;\n            return $__3;\n          case 2:\n            $__4 = $ctx.sent;\n            $ctx.state = 4;\n            break;\n          case 4:\n            $ctx.state = ($__4) ? 13 : 9;\n            break;\n          case 13:\n            $__8 = $__4;\n            $ctx.state = 14;\n            break;\n          case 9:\n            $__5 = this._isBuildToolsInstalled;\n            $__6 = $__5.call(this, version);\n            $ctx.state = 10;\n            break;\n          case 10:\n            $ctx.state = 6;\n            return $__6;\n          case 6:\n            $__7 = $ctx.sent;\n            $ctx.state = 8;\n            break;\n          case 8:\n            $__8 = $__7;\n            $ctx.state = 14;\n            break;\n          case 14:\n            $ctx.returnValue = $__8;\n            $ctx.state = -2;\n            break;\n          default:\n            return $ctx.end();\n        }\n    }, $__1, this);\n  })),\n  _isBuildToolsInstalled: async($traceurRuntime.initGeneratorFunction(function $__9(version) {\n    var mainVer,\n        key,\n        command,\n        stdout,\n        e;\n    return $traceurRuntime.createGeneratorInstance(function($ctx) {\n      while (true)\n        switch ($ctx.state) {\n          case 0:\n            mainVer = version.split(\".\")[0];\n            key = \"HKLM\\\\SOFTWARE\\\\Classes\\\\Installer\\\\Dependencies\\\\Microsoft.VS.VisualCppBuildTools_x86_enu,v\" + mainVer;\n            command = \"reg query \\\"\" + key + \"\\\"\";\n            $ctx.state = 19;\n            break;\n          case 19:\n            $ctx.pushTry(7, null);\n            $ctx.state = 10;\n            break;\n          case 10:\n            $ctx.state = 2;\n            return processHelpers.exec(command);\n          case 2:\n            stdout = $ctx.sent;\n            $ctx.state = 4;\n            break;\n          case 4:\n            $ctx.returnValue = stdout && stdout.indexOf(\"Visual C++\") > 0;\n            $ctx.state = -2;\n            break;\n          case 6:\n            $ctx.popTry();\n            $ctx.state = 12;\n            break;\n          case 7:\n            $ctx.popTry();\n            $ctx.maybeUncatchable();\n            e = $ctx.storedException;\n            $ctx.state = 13;\n            break;\n          case 13:\n            _.noop(e);\n            $ctx.state = 12;\n            break;\n          case 12:\n            $ctx.returnValue = false;\n            $ctx.state = -2;\n            break;\n          default:\n            return $ctx.end();\n        }\n    }, $__9, this);\n  })),\n  _isVSInstalled: async($traceurRuntime.initGeneratorFunction(function $__10(version) {\n    var command,\n        stdout,\n        lines,\n        e;\n    return $traceurRuntime.createGeneratorInstance(function($ctx) {\n      while (true)\n        switch ($ctx.state) {\n          case 0:\n            command = \"reg query \\\"HKLM\\\\Software\\\\Microsoft\\\\VisualStudio\\\\\" + version + \"\\\"\";\n            $ctx.state = 23;\n            break;\n          case 23:\n            $ctx.pushTry(11, null);\n            $ctx.state = 14;\n            break;\n          case 14:\n            $ctx.state = 2;\n            return processHelpers.exec(command);\n          case 2:\n            stdout = $ctx.sent;\n            $ctx.state = 4;\n            break;\n          case 4:\n            $ctx.state = (stdout) ? 8 : 6;\n            break;\n          case 8:\n            lines = stdout.split(\"\\r\\n\").filter(function(line) {\n              return line.length > 10;\n            });\n            $ctx.state = 9;\n            break;\n          case 9:\n            $ctx.state = (lines.length >= 4) ? 5 : 6;\n            break;\n          case 5:\n            $ctx.returnValue = true;\n            $ctx.state = -2;\n            break;\n          case 6:\n            $ctx.popTry();\n            $ctx.state = 16;\n            break;\n          case 11:\n            $ctx.popTry();\n            $ctx.maybeUncatchable();\n            e = $ctx.storedException;\n            $ctx.state = 17;\n            break;\n          case 17:\n            _.noop(e);\n            $ctx.state = 16;\n            break;\n          case 16:\n            $ctx.returnValue = false;\n            $ctx.state = -2;\n            break;\n          default:\n            return $ctx.end();\n        }\n    }, $__10, this);\n  }))\n};\nmodule.exports = vsDetect;\n\n//# sourceMappingURL=vsDetect.js.map\n"}